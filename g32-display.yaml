substitutions:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# bitte nur in diesen nächsten Zeilen Änderungen vornehmen                    #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Name des ESPHome Geräts (kann frei gewählt werden, keine Sonderzeichen)
  name: g32-display-bt90
  device_description: "Monitor an OW G32 grill" 

# Bluetooth MAC des G32 (z.B. zu finden mit der App nrf_Connect)
# oder zum Auslesen unten den 'esp32_ble_tracker:' entkommentieren
  g32_mac_address: 94:E6:86:0A:27:52

# Credentials des eigenen Wifi Netzwerks einfügen:
#  wifi_ssid: "my_wifi_ssid"
#  wifi_password: "my_wifi_password"

# oder die Werte aus der secrets.yaml benutzen:
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password

# hier die Daten aus dem neu erstellten ESPHome Gerät einfügen. Beispiel:
# Enable Home Assistant API
# api:
#   encryption:
#     key: "OZNMBo2xusQ+BIzO1pfIQepp72VCfBzCWO/pSttPCQg="
# den dort angezeigten key einfügen:
  api_encryption_key: "E1fyywUUE1DWzu0OzhDkyc4yAnfGwyEfsVNvhytrU6k="

# ota:
#   - platform: esphome
#     password: "7fdf9f656d36180bfba92d596c9e7db3"
# das angezeiget password einfügen:
  ota_password: "7fdf9f656d36180bfba92d596c9e7db3"

#   # Enable fallback hotspot (captive portal) in case wifi connection fails
#   ap:
#     ssid: "Hztht Fallback Hotspot"
#     password: "rXlU1NZRut9K"
# ssid: und passord: einfügen:
  ap_ssid: "G32 Display Fallback Hotspot"
  ap_password: "4Lytxfy25DNh"

# benutzerdefinierbare Displayelemente  (nur noch für die Limits-Page!)
# Texte festlegen für Zonen und Sensoren (max. 8 Zeichen):
  Zone_Text:   "Zone "     # ergibt 'Zone 1', 'Zone 2' usw.
  Sensor_Text: "Sensor "   # ergibt 'Sensor 1', 'Sensor 2' usw.

# Farben für die 'Temperatur-Kreise' festlegen:
  Zone_Arc_Color:    "0xff0000"  # 0xff0000 = Rot
  Sensor_Arc_Color:  "0xffff00"  # 0xffff00 = Gelb

# Farben für die Temperatur-Limits Texte festlegen:
  Limit_text_Color:  "0xaaaaaa"  # 0xaaaaaa = Grau
#  Limit_text_Color:  "0xffb455"  # 0xffb455 = Orange

# Farbe für den 'Gas-Balken' auf der 'arcs page' festlegen:
  Gas_Bar_Color:      "0x00ff00"  # 0x00ff00 = Hellgrün
  Gas_Bar_Low_Color:  "0xff0000"  # 0xff0000 = Rot
# Farbe für den 'Gas-Balken' auf der 'numbers page' festlegen:
  Gas_Bar_Color2:     "0xaaaaaa"  # 0xaaaaaa = Grau
  Gas_Bar_Low_Color2: "0xff0000"  # 0xff0000 = Rot

# Batteriesymbol komplett ausgeblenden (kein Akku vorhanden)? true = ausblenden, false = anzeigen :
#  Hide_Battery_Symbol: 'true'
  Hide_Battery_Symbol: 'false'
# SOC (in %) des Akkus festlegen, unterhalb dessen das Batteriesymbol in rot angezeigt wird:
  Min_SOC: "25"

# Minimalwert für Gasmenge in % festlegen
  Min_Gas: "20"

# sollen inaktive Sensoren komplett ausgeblendet werden? true = ausblenden, false = anzeigen:
#  Hide_Inactive_Sensors: 'true' # inaktive Sensoren werden ausgeblendet
  Hide_Inactive_Sensors: 'false' # inaktive Sensoren werden angezeigt

# sollen für Zonen und Sensoren Temperaturlimits gesetzt werden können? true = Ja, false = Nein
  Enable_Temperature_Limits: 'true'

# Maximal-Temperatur für Sensoren setzen. Z.B. 130 (°C) für Kerntemperatur, 300 für Garraum:
  Sensor1_Max: "130"
  Sensor2_Max: "130"
  Sensor3_Max: "130"
  Sensor4_Max: "130"

# Lautsprecher (Beeper) Lautsrtärke festlegen 1.0 = Maximum, 0.1 = sehr leise
  Beeper_Max: "0.8"

# Zeitinterval für Lautsprecher (Beeper) Alarmmeldungen festlegen Default: 5s
  Beeper_interval: "5s"

# Soundeffekte (in RTTTL syntax):
  Wifi_Connect_Sound: "dadi:d=16,o=6,b=140:d6,32p,e6"
  Wifi_Disconnect_Sound: "siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e"
  Timer_Alarm_Sound: "didididi:d=16,o=6,b=140:e6,32p,e6,32p,e6,32p,e6"
  Zone_Limit_Alarm_Sound: "dadidadi:d=8,o=5,b=150:d,e,d,e,d,e,d,e"
  Sensor_Limit_Alarm_Sound: "didadida:d=8,o=5,b=150:e,d,e,d,e,d,e,d"


# Uhrzeit 11:32:45 oben in der Mitte der Statuszeile anzeigen? true = Ja, false = Nein
# nur sinnvoll in Verbindung mit Home Assistant, da die Uhrzeit von dort kommt
  Show_Time: 'true'

# # Timer ausblenden? true = Timer ausblenden, false = Timer anzeigen
  Disable_Timer: 'false'

# welche Anzeigen sollen aktiv sein, die bunten 'Arcs' und/oder die grauen 'Zahlen'?
# Wenn beide aktiv, dann Wechsel zwischen den Anzeigen durch 'Swipen' nach rechts oder links
# anzeigen: 'true', nicht anzeigen: 'false' (mindestens eins sollte 'true' sein!)
  Show_Arcs_Page: 'true'
  Show_Numbers_Page: 'true'

# Display Timeout (schont Akku und Display). Touch reaktiviert das Display.
# Zeit bis zum Ausschalten festlegen (1-3600(s)). 0 deaktiviert die Funktion
# Display_Timeout: "300"
  Display_Timeout: "0"

# Orientierung des Displays: todo ???
# not possible at the moment


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# ab hier bitte nur Änderungen vornehmen, wenn man weiß, was man tut und will #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
esphome:
  name: ${name}
  build_path: /tmp/esphome_build
  platformio_options:
    upload_speed: 921600
    board_build.flash_mode: dio
    board_build.f_flash: 80000000L
    board_build.f_cpu: 240000000L

  project:
    name: "g32.bt_display480_320"
    version: "1.4.0"

esp32:
# use either board: or variant:
  board: esp32-s3-devkitc-1
#  variant: esp32S3
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

psram:
  mode: octal
  speed: 80MHz # 120mhz is not supported and falls back to 40mhz

# Enable logging
logger:
  baud_rate: 921600

# Enable Home Assistant API
api:
  encryption:
    key: ${api_encryption_key}

ota:
  - platform: esphome
    password: ${ota_password}

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}
  fast_connect: True
  on_connect:
    then:
      - lvgl.widget.update:
          id: [wifi_connect_label, wifi_connect_label2]
          hidden: false
      - rtttl.play: ${Wifi_Connect_Sound}
      - globals.set:
          id: wifi_connected
          value: 'true'
      - if:
          condition:
            lambda: 'return id(show_arcs_page) == true;'
          then:
            - lvgl.page.show: arcs_page
          else:
            - lvgl.page.show: numbers_page
      - lvgl.widget.hide: boot_screen
  on_disconnect:
    then:
      - lvgl.widget.update:
          id: [wifi_connect_label, wifi_connect_label2]
          hidden: true
      - rtttl.play: ${Wifi_Disconnect_Sound}
      - globals.set:
          id: wifi_connected
          value: 'false'

# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${ap_ssid}
    password: ${ap_password}

#esp32_ble_tracker:
#  on_ble_advertise:
#    then:
#      - lambda: |-
#          if (x.get_name().rfind("OWG-G32C", 0) == 0) {
#            ESP_LOGI("ble_adv", "G32 gefunden");
#            ESP_LOGI("ble_adv", "  Name: %s", x.get_name().c_str());
#            ESP_LOGI("ble_adv", "  MAC address: %s", x.address_str().c_str());
#          }
#          if (x.get_name().rfind("MEATER+", 0) == 0) {
#            ESP_LOGI("ble_adv", "Meater+ gefunden");
#            ESP_LOGI("ble_adv", "  Name: %s", x.get_name().c_str());
#            ESP_LOGI("ble_adv", "  MAC address: %s", x.address_str().c_str());
#          }

ble_client:
  - mac_address: ${g32_mac_address}
    id: ow_g32
    on_connect:
      then:
        - lvgl.widget.update:
            id: [g32bt_connect_label, g32bt_connect_label2]
            hidden: false
        - lvgl.widget.show: g32bt_connect_label
        - rtttl.play: 'Pling2:d=16,o=6,b=140:e6,32p,d6'
        - globals.set:
            id: g32_connected
            value: 'true'
        - if:
            condition:
              lambda: 'return id(show_arcs_page) == true;'
            then:
              - lvgl.page.show: arcs_page
            else:
              - lvgl.page.show: numbers_page
        - lvgl.widget.hide: boot_screen
    on_disconnect:
      then:
        - lvgl.widget.update:
            id: [g32bt_connect_label, g32bt_connect_label2]
            hidden: true
        - lvgl.widget.hide: [zone1_label, zone2_label, zone3_label, zone4_label]
        - lvgl.widget.hide: [sensor1_label, sensor2_label, sensor3_label, sensor4_label]
        - lvgl.widget.hide: [gas_percent_label, gas_weight_label, gas_percent_bar]
        - rtttl.play: 'siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e'
        - globals.set:
            id: g32_connected
            value: 'false'

#-------------------------------------------
# Display qspi
#-------------------------------------------
spi:
  id: display_qspi
  type: quad
  clk_pin: 47
  data_pins: [21, 48, 40, 39]

display:
  - platform: mipi_spi
    model: JC3248W535
#  - platform: qspi_dbi
#    model: axs15231
    data_rate: 40MHz
    id: my_display
    spi_id: display_qspi
    dimensions:
      height: 320
      width: 480
    cs_pin:
      number: 45
      ignore_strapping_warning: true
    rotation: 90 # for landscape
#    rotation: 270 # for landscape inverted
#   auto_clear has to be seit to 'false' for lvgl!:
    auto_clear_enabled: false

#-------------------------------------------
# Touchscreen gt911 i2c
#-------------------------------------------
i2c:
  sda: 4
  scl: 8
  id: touchscreen_bus
# scan: true

touchscreen:
  - platform: axs15231
    id: my_touch
    display: my_display
    i2c_id: touchscreen_bus
    calibration:
      x_min: 1
      x_max: 480
      y_min: 1
      y_max: 320
    transform:
      swap_xy: true
# for 90° normal display orientation
      mirror_x: false
      mirror_y: true
# for 270° inverted display orientation
#      mirror_x: true
#      mirror_y: false
# for test purposes, touch coordinates can be logged
#    on_touch:
#      - lambda: |-
#          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
#            touch.x,
#            touch.y,
#            touch.x_raw,
#            touch.y_raw
#          );
    on_release:
      - if:
          condition: lvgl.is_paused
          then:
            - logger.log: "Display is resuming"
            - if:
                condition:
                  lambda: 'return id(show_arcs_page) == true;'
                then:
                  - lvgl.page.show: arcs_page
                else:
                  - lvgl.page.show: numbers_page
            - lvgl.resume:
            - lvgl.widget.redraw:
            - light.turn_on: backlight

#-------------------------------------------
# Internal outputs
#-------------------------------------------
output:
  - id: gpio_backlight_pwm
    platform: ledc
    pin: 1

  - id: helper_low_tilt
    platform: ledc
    pin: 17

  - id: helper_low_beeper
    platform: ledc
    pin: 14

  - platform: ledc
    pin: 9
    id: rtttl_out

#-------------------------------------------
# Internal lights
#-------------------------------------------
light:
  - id: backlight
    name: Backlight
    platform: monochromatic
    output: gpio_backlight_pwm
    restore_mode: ALWAYS_ON

#-------------------------------------------
# Internal RTTTL speaker
#-------------------------------------------
rtttl:
  id: my_rtttl
  output: rtttl_out
  gain: ${Beeper_Max}

interval:
  - interval: 1s
    then:
      - script.execute: timer_update

  - interval: ${Beeper_interval}
    then:
      - lambda: |-
          if( ((id(zone1_limit_value) > 0) && (id(zone1_value) >= id(zone1_limit_value)))
           || ((id(zone2_limit_value) > 0) && (id(zone2_value) >= id(zone2_limit_value)))
           || ((id(zone3_limit_value) > 0) && (id(zone3_value) >= id(zone3_limit_value)))
           || ((id(zone4_limit_value) > 0) && (id(zone4_value) >= id(zone4_limit_value))) ) {
            id(my_rtttl).play("${Zone_Limit_Alarm_Sound}");
          }
          else if ( ((id(sensor1_limit_value) > 0) && (id(sensor1_value) >= id(sensor1_limit_value)))
                 || ((id(sensor2_limit_value) > 0) && (id(sensor2_value) >= id(sensor2_limit_value)))
                 || ((id(sensor3_limit_value) > 0) && (id(sensor3_value) >= id(sensor3_limit_value)))
                 || ((id(sensor4_limit_value) > 0) && (id(sensor4_value) >= id(sensor4_limit_value))) ) {
            id(my_rtttl).play("${Sensor_Limit_Alarm_Sound}");
          }
          else if( id(timer_alarm) == true ) {
            id(my_rtttl).play("${Timer_Alarm_Sound}");
          }

#-------------------------------------------
# Global varaibles
#-------------------------------------------
globals:
  - id: wifi_connected
    type: bool
    initial_value: 'false'
  - id: g32_connected
    type: bool
    initial_value: 'false'

  - id: show_arcs_page
    type: bool
    initial_value: ${Show_Arcs_Page}
  - id: show_numbers_page
    type: bool
    initial_value: ${Show_Numbers_Page}

  - id: hide_inactive_sensors
    type: bool
    initial_value: ${Hide_Inactive_Sensors}
  - id: active_sensors      # bits set/reset for every active/inactive Sensor
    type: int
    initial_value: '0'

  - id: hide_battery_symbol
    type: bool
    initial_value: ${Hide_Battery_Symbol}

  - id: show_time           # enables/disables time (HOUR:MINUT) display
    type: bool
    initial_value: ${Show_Time}

  - id: zone1_value         # the value used for Zone temperature labels and arcs
    type: int
    initial_value: '1500'   # 1500 means invalid
  - id: zone2_value
    type: int
    initial_value: '1500'
  - id: zone3_value
    type: int
    initial_value: '1500'
  - id: zone4_value
    type: int
    initial_value: '1500'

  - id: sensor1_value       # the value used for Sensor temperature labels and arcs
    type: int
    initial_value: '1500'
  - id: sensor2_value
    type: int
    initial_value: '1500'
  - id: sensor3_value
    type: int
    initial_value: '1500'
  - id: sensor4_value
    type: int
    initial_value: '1500'

  - id: zone1_limit_value   # the value used for Zone limit labels and arcs
    type: int
    initial_value: '0'
  - id: zone2_limit_value
    type: int
    initial_value: '0'
  - id: zone3_limit_value
    type: int
    initial_value: '0'
  - id: zone4_limit_value
    type: int
    initial_value: '0'

  - id: sensor1_limit_value # the value used for Sensor limit labels and arcs
    type: int
    initial_value: '0'
  - id: sensor2_limit_value
    type: int
    initial_value: '0'
  - id: sensor3_limit_value
    type: int
    initial_value: '0'
  - id: sensor4_limit_value
    type: int
    initial_value: '0'

  - id: battery_soc_value
    type: int
    initial_value: '0'

  - id: min_soc_value
    type: int
    initial_value: ${Min_SOC}

  - id: min_gas_value
    type: int
    initial_value: ${Min_Gas}

  - id: page_index          # parameter for page
    type: int
    initial_value: '0'
  - id: sensor_index        # parameter for Zone (1-4) or Sensor (5-8)
    type: int
    initial_value: '0'
  - id: sensor_limit_value  # the actual sensor limit for the indexed Zone/Sensor
    type: int
    initial_value: '0'
  - id: sensor_max_value    # maximum value for Zone and Sensor values (arcs)
    type: int
    initial_value: '0'

  - id: timer_h             # timer hours
    type: int
    initial_value: '0'
  - id: timer_m             # timer minutes
    type: int
    initial_value: '0'
  - id: timer_s             # timer seconds
    type: int
    initial_value: '0'
  - id: timer_active        # timer active (=running)
    type: bool
    initial_value: 'false'
  - id: timer_alarm         # timer alarm active
    type: bool
    initial_value: 'false'

  - id: helper_h             # timer hours
    type: int
    initial_value: '0'
  - id: helper_m             # timer minutes
    type: int
    initial_value: '0'
  - id: helper_s             # timer seconds
    type: int
    initial_value: '0'


#-------------------------------------------
# for screen timeout
#-------------------------------------------
number:
  - platform: template
    name: Screen timeout
    optimistic: true
    id: display_timeout
    unit_of_measurement: "s"
    initial_value: ${Display_Timeout}
    restore_value: true
    min_value: 0 # 0 means 'no timeout'
    max_value: 3600
    step: 5
    mode: box

#-------------------------------------------
# Homeassistant or SNTP Time platform
#-------------------------------------------
time:
#  platform: sntp
#  id: ha_time
#  servers:
#   - ntp0.ntp-servers.net
#   - ntp1.ntp-servers.net
#   - ntp2.ntp-servers.net
  platform: homeassistant
  id: ha_time
  timezone: Europe/Berlin
  on_time_sync:
    - script.execute: time_update
  on_time:
    - seconds: '*'
      then:
        - script.execute: time_update

#-------------------------------------------
# LVGL library for displays
#-------------------------------------------
lvgl:
  draw_rounding: 8 # necessary for the axs15231 display controller
  displays: my_display
  touchscreens: my_touch
  bg_color: 0
  border_width: 0
  outline_width: 0
  theme:
    label:
      text_color: 0xFFFFFF
      bg_color: 0
      bg_opa: TRANSP
      width: 120
      text_align: center
    bar:
      radius: 5
      indicator:
        radius: 5
        arc_color: red
    arc:
      radius: 5
      arc_color: 0x333333
      indicator:
        radius: 5
  style_definitions:
    - id: arc_style
      x: 10
      y: 0
      width: 100
      height: 120
      arc_opa: 60%

      # style for zone and sensor objects with arcs
    - id: temp_obj_style
      width: 120
      height: 120
      bg_color: 0
      text_color: 0xffffff
      pad_all: 0
      radius: 0
      outline_width: 0
      outline_color: 0
      border_width: 0
      border_color: 0
      border_side: NONE
      outline_pad: 0

      # style for zone objects with numbers
    - id: zone_obj_style
      width: 104
      height: 104
      bg_color: 0x333333
      pad_all: 0
      outline_width: 0
      outline_color: 0
      border_width: 0
      border_color: 0
      border_side: NONE
      outline_pad: 0
      radius: 10

      # style for sensor objects with numbers
    - id: sensor_obj_style
      width: 104
      height: 104
      bg_color: 0x333333
      pad_all: 0
      outline_width: 2
      outline_color: 0xaaaaaa
      border_width: 0
      border_color: 0
      border_side: NONE
      outline_pad: 0
      radius: 52

      # style for gas
    - id: gas_obj_style
      width: 478
      height: 25
      bg_color: 0
      text_color: 0xffffff
      pad_all: 0
      radius: 0
      outline_width: 0
      outline_color: 0
      border_width: 0
      border_color: 0
      border_side: NONE
      outline_pad: 0

    - id: main_font_style
      text_font: MONTSERRAT_18
    - id: big_font_style
      text_font: MONTSERRAT_26
    - id: zone_arc_style
      width: 100
      height: 120
    - id: sensor_arc_style
      width: 100
      height: 120

  # send display to idle state after timeout
  on_idle:
    timeout: !lambda "return(id(display_timeout).state * 1000);"
    then:
    - if:
        condition:
        - lambda: "return id(display_timeout).state > 0;"
        then:
          - logger.log: "Display is idle"
          - light.turn_off: backlight
          - lvgl.pause:

  # boot screen with spinner until first data received
  top_layer:
    widgets:
      - obj:
          id: boot_screen
          x: 0
          y: 0
          width: 480
          height: 320
          bg_color: 0
          bg_opa: COVER
          radius: 0
          pad_all: 0
          border_width: 0
          widgets:
            - spinner:
                align: CENTER
                spin_time: 1s
                arc_length: 60deg
                arc_width: 12
                indicator:
                  arc_color: 0x00ff00
                  arc_width: 12

  # pages
  pages:
    # main page with arcs
    - id: arcs_page
      pad_all: 0
      on_swipe_left:
        then:
          if:
            condition:
              lambda: 'return id(show_numbers_page) == true;'
            then:
              - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 600ms
      on_swipe_right:
        then:
          if:
            condition:
              lambda: 'return id(show_numbers_page) == true;'
            then:
              - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
              - lvgl.page.next:
                  animation: OUT_RIGHT
                  time: 600ms
      widgets:
        # one common headline for all temperature zones
        - label:
            x: 12
            y: 0
            text_font: MONTSERRAT_20
            text_align: left
            text: "Zonen"

        # zone 1 object with Headline, Labels and Arc
        - obj:
            id: zone1_obj
            x: 0
            y: 30
            styles: temp_obj_style
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: zone1_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text_color: !lambda |-
                    if( (id(zone1_limit_value) == 0) || (id(zone1_value) < id(zone1_limit_value)) ) {
                      return lv_color_hex(0xffffff);
                      } else {
                      return lv_color_hex(0xff0000);
                    }
                  text: !lambda |-
                    if( id(zone1_value) < 1500) {return (to_string(static_cast<int>(id(zone1_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 1;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone1_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone1_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}1 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone1_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: zone1_limit_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(zone1_limit_value);
              - arc:
                  id: zone1_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(zone1_value) < 1500) {return id(zone1_value);
                    } else {
                      return 0;
                    }

        # zone 2 object with Headline, Labels and Arc
        - obj:
            id: zone2_obj
            x: 120
            y: 30
            styles: temp_obj_style
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: zone2_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text_color: !lambda |-
                    if( (id(zone2_limit_value) == 0) || (id(zone2_value) < id(zone2_limit_value)) ) {
                      return lv_color_hex(0xffffff);
                      } else {
                      return lv_color_hex(0xff0000);
                    }
                  text: !lambda |-
                    if( id(zone2_value) < 1500) {return (to_string(static_cast<int>(id(zone2_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 2;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone2_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone2_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}2 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone2_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: zone2_limit_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(zone2_limit_value);
              - arc:
                  id: zone2_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(zone2_value) < 1500) {return id(zone2_value);
                    } else {
                      return 0;
                    }

        # zone 3 object with Headline, Labels and Arc
        - obj:
            id: zone3_obj
            x: 240
            y: 30
            styles: temp_obj_style
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: zone3_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text_color: !lambda |-
                    if( (id(zone3_limit_value) == 0) || (id(zone3_value) < id(zone3_limit_value)) ) {
                      return lv_color_hex(0xffffff);
                      } else {
                      return lv_color_hex(0xff0000);
                    }
                  text: !lambda |-
                    if( id(zone3_value) < 1500) {return (to_string(static_cast<int>(id(zone3_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 3;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone3_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone3_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}3 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone3_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: zone3_limit_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(zone3_limit_value);
              - arc:
                  id: zone3_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(zone3_value) < 1500) {return id(zone3_value);
                    } else {
                      return 0;
                    }

        # zone 4 object with Headline, Labels and Arc
        - obj:
            id: zone4_obj
            x: 360
            y: 30
            styles: temp_obj_style
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: zone4_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text_color: !lambda |-
                    if( (id(zone4_limit_value) == 0) || (id(zone4_value) < id(zone4_limit_value)) ) {
                      return lv_color_hex(0xffffff);
                      } else {
                      return lv_color_hex(0xff0000);
                    }
                  text: !lambda |-
                    if( id(zone4_value) < 1500) {return (to_string(static_cast<int>(id(zone4_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 4;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone4_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone4_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}4 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone4_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: zone4_limit_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(zone4_limit_value);
              - arc:
                  id: zone4_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(zone4_value) < 1500) {return id(zone4_value);
                    } else {
                      return 0;
                    }

        # one common headline for all sensors
        - label:
            id: sensors_headline
            x: 12
            y: 140
            width: 460
            text_font: MONTSERRAT_20
            text_align: left
            text: "Temperatursensoren"
            hidden: !lambda return (id(active_sensors) == 0);

        # timer
        - label:
            id: timer_value
            x: 380
            y: 140
            width: 100
            text_font: MONTSERRAT_20
            text_align: left
            text: "--:--:--"
            hidden: ${Disable_Timer}
            clickable: 'true'
            on_press:
              - lambda: |-
                  id(page_index) = 1;
              - lvgl.page.show: timer_page

        # sensor 1 object with Headline, Labels and Arc
        - obj:
            id: sensor1_obj
            x: 0
            y: 176
            styles: temp_obj_style
            radius: 50
            hidden: !lambda |-
              if( (id(sensor1_value) < 1500) || (id(sensor1_limit_value) > 0) || (id(hide_inactive_sensors) == false) ) {
                id(active_sensors) |= 0x01;
                return false;
              } else {
                id(active_sensors) &= ~0x01;
                return true;
              }
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: sensor1_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text: !lambda |-
                    if( id(sensor1_value) < 1500) {return (to_string(static_cast<int>(id(sensor1_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor1_limit_value) == 0) || (id(sensor1_value) < id(sensor1_limit_value) && id(sensor1_value) < 1500) ) {
                      return lv_color_hex(0xffffff); // White
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 5;
                        id(sensor_max_value) = ${Sensor1_Max};
                        id(sensor_limit_value) = id(sensor1_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor1_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor1_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}1 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor1_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: sensor1_limit_arc
                  min_value: 1
                  max_value: ${Sensor1_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(sensor1_limit_value);
              - arc:
                  id: sensor1_arc
                  min_value: 1
                  max_value: ${Sensor1_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(sensor1_value) < 1500) {return (id(sensor1_value));
                    } else {
                      return (0);
                    }

        # sensor 2 object with Headline, Labels and Arc
        - obj:
            id: sensor2_obj
            x: 120
            y: 176
            styles: temp_obj_style
            hidden: !lambda |-
              if( (id(sensor2_value) < 1500) || (id(sensor2_limit_value) > 0) || (id(hide_inactive_sensors) == false) ) {
                id(active_sensors) |= 0x02;
                return false;
              } else {
                id(active_sensors) &= ~0x02;
                return true;
              }
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: sensor2_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text: !lambda |-
                    if( id(sensor2_value) < 1500) {return (to_string(static_cast<int>(id(sensor2_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor2_limit_value) == 0) || (id(sensor2_value) < id(sensor2_limit_value) && id(sensor2_value) < 1500) ) {
                      return lv_color_hex(0xffffff); // White
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 6;
                        id(sensor_max_value) = ${Sensor2_Max};
                        id(sensor_limit_value) = id(sensor2_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor2_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor2_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}2 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor2_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: sensor2_limit_arc
                  min_value: 1
                  max_value: ${Sensor2_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(sensor2_limit_value);
              - arc:
                  id: sensor2_arc
                  min_value: 1
                  max_value: ${Sensor2_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(sensor2_value) < 1500) {return (id(sensor2_value));
                    } else {
                      return (0);
                    }

        # sensor 3 object with Headline, Labels and Arc
        - obj:
            id: sensor3_obj
            x: 240
            y: 176
            styles: temp_obj_style
            hidden: !lambda |-
              if( (id(sensor3_value) < 1500) || (id(sensor3_limit_value) > 0) || (id(hide_inactive_sensors) == false) ) {
                id(active_sensors) |= 0x04;
                return false;
              } else {
                id(active_sensors) &= ~0x04;
                return true;
              }
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: sensor3_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text: !lambda |-
                    if( id(sensor3_value) < 1500) {return (to_string(static_cast<int>(id(sensor3_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor3_limit_value) == 0) || (id(sensor3_value) < id(sensor3_limit_value) && id(sensor3_value) < 1500) ) {
                      return lv_color_hex(0xffffff); // White
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 7;
                        id(sensor_max_value) = ${Sensor3_Max};
                        id(sensor_limit_value) = id(sensor3_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor3_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor3_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}3 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor3_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: sensor3_limit_arc
                  min_value: 1
                  max_value: ${Sensor3_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(sensor3_limit_value);
              - arc:
                  id: sensor3_arc
                  min_value: 1
                  max_value: ${Sensor3_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(sensor3_value) < 1500) {return (id(sensor3_value));
                    } else {
                      return (0);
                    }

        # sensor 4 object with Headline, Labels and Arc
        - obj:
            id: sensor4_obj
            x: 360
            y: 176
            styles: temp_obj_style
            hidden: !lambda |-
              if( (id(sensor4_value) < 1500) || (id(sensor4_limit_value) > 0) || (id(hide_inactive_sensors) == false) ) {
                id(active_sensors) |= 0x08;
                return false;
              } else {
                id(active_sensors) &= ~0x08;
                return true;
              }
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: sensor4_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text: !lambda |-
                    if( id(sensor4_value) < 1500) {return (to_string(static_cast<int>(id(sensor4_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor4_limit_value) == 0) || (id(sensor4_value) < id(sensor4_limit_value) && id(sensor4_value) < 1500) ) {
                      return lv_color_hex(0xffffff); // White
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 8;
                        id(sensor_max_value) = ${Sensor4_Max};
                        id(sensor_limit_value) = id(sensor4_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor4_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor4_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}4 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor4_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: sensor4_limit_arc
                  min_value: 1
                  max_value: ${Sensor4_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(sensor4_limit_value);
              - arc:
                  id: sensor4_arc
                  min_value: 1
                  max_value: ${Sensor4_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(sensor4_value) < 1500) {return (id(sensor4_value));
                    } else {
                      return (0);
                    }

        # gas object with gas values in % and g
        - obj:
            id: gas_obj
            x: 0
            y: 294
            styles: gas_obj_style
            widgets:
              - label:
                  x: 24
                  y: 0
                  text_font: MONTSERRAT_18
                  text_align: LEFT
                  text: 'Gas:'
              - label:
                  id: gas_percent_label
                  x: 260
                  y: 0
                  text_font: MONTSERRAT_18
                  text: '-- %'
              - label:
                  id: gas_weight_label
                  x: 358
                  y: 0
                  text_font: MONTSERRAT_18
                  text: '--- g'
              - bar:
                  id: gas_percent_bar
                  x: 80
                  y: 5
                  height: 12
                  width: 200
                  radius: 5
                  min_value: 1
                  max_value: 100
                  bg_color: 0xffffff
                  indicator:
                    bg_color: ${Gas_Bar_Color}
                  value: 0

        # symbol for battery low warning
        - obj:
            id: battery_symbol_obj
            x: 420
            y: 0
            width: 60
            height: 24
            bg_color: 0
            pad_all: 0
            outline_width: 0
            outline_color: 0
            border_width: 0
            border_color: 0
            border_side: NONE
            outline_pad: 0
            radius: 0
            hidden: ${Hide_Battery_Symbol}
            widgets:
              - line:
                  id: battery_symbol
                  points:
                    - 12, 2
                    - 18, 2
                    - 17, 2
                    - 17, 4
                    - 17, 3
                    - 20, 3
                    - 19, 3
                    - 19, 20
                    - 19, 19
                    - 10, 19
                    - 11, 19
                    - 11, 2
                    - 11, 3
                    - 14, 3
                  line_width: 2
                  line_rounded: false
                  line_color: !lambda |-
                    if( id(battery_soc_value) <= id(min_soc_value) ) {
                      return lv_color_hex(0xff0000); // red
                      } else {
                      return lv_color_hex(0x00ff00); // green
                    }
              - bar:
                  id: battery_bar
                  x: 12
                  y: 3
                  height: 15
                  width: 6
                  radius: 0
                  min_value: 0
                  max_value: 100
                  bg_color: 0
                  # for some unknown reason this code does not work!
                  indicator:
                    bg_color:  !lambda |-
                      if( id(battery_soc_value) <= id(min_soc_value) ) {
                        return lv_color_hex(0xff0000); // red
                        } else {
                        return lv_color_hex(0x00ff00); // green
                      }
                    radius: 0
                  # end of not working code!
                  value: !lambda return id(battery_soc_value);
              - label:
                  id: battery_soc_label
                  x: 25
                  y: 3
                  text_font: MONTSERRAT_14
                  text_align: CENTER
                  width: 35
                  text_color: !lambda |-
                    if( id(battery_soc_value) <= id(min_soc_value) ) {
                      return lv_color_hex(0xff0000); // red
                      } else {
                      return lv_color_hex(0x00ff00); // green
                    }
                  text: !lambda |-
                    return (to_string(static_cast<int>(id(battery_soc_value)))+"%").c_str();

        # symbol for successfull BT connection
        - label:
            id: g32bt_connect_label
            x: 390
            y: 0
            text_font: MONTSERRAT_18
            text_color: 0x00ff00
            text_align: CENTER
            width: 30
            text: "\uF293" # BT symbol
            hidden: true

        # symbol for successfull WIFI connection
        - label:
            id: wifi_connect_label
            x: 360
            y: 0
            text_font: MONTSERRAT_18
            text_color: 0x00ff00
            text_align: CENTER
            width: 30
            text: "\uF1EB" # WIFI symbol
            hidden: true

        # symbol for 'light on'
        - label:
            id: light_on_label
            x: 330
            y: 0
            text_font: MONTSERRAT_18
            text_color: 0xffff00
            text_align: CENTER
            width: 30
            text: "\uF0E7" # lightning
            hidden: true

        # symbol for 'firebox open'
        - label:
            id: firebox_open_label
            x: 300
            y: 0
            text_font: MONTSERRAT_18
            text_color: 0x00ff00
            text_align: CENTER
            width: 30
            text: "\uF093" # arrow up
            hidden: true

        # symbol for gas low warning
        - label:
            id: g32_warning_label
            x: 120
            y: 0
            text_font: MONTSERRAT_18
            text_color: 0xff0000
            text_align: CENTER
            width: 30
            text: "\uF071" # invertiertes Ausrufungszeichen
            hidden: true

          # time string hours:minutes
        - label:
            id: display_time
            x: 200
            y: 0
            text_font: MONTSERRAT_20
            text_color: 0xffffff
            text_align: LEFT
            width: 100
            text: "00:00:00"
            hidden: true

    # main page with numbers
    - id: numbers_page
      pad_all: 0
      on_swipe_left:
        then:
          if:
            condition:
              lambda: 'return id(show_arcs_page) == true;'
            then:
              - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 600ms
      on_swipe_right:
        then:
          if:
            condition:
              lambda: 'return id(show_arcs_page) == true;'
            then:
              - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
              - lvgl.page.next:
                  animation: OUT_RIGHT
                  time: 600ms
      widgets:
        # one common headline for all zones
        - label:
            x: 12
            y: 0
            text_font: MONTSERRAT_20
            text_align: left
            text: "Zonen"

        # zone 1 object with Labels and line
        - obj:
            id: zone1_obj2
            x: 6
            y: 28
            styles: zone_obj_style
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: zone1_label2
                  x: 0
                  y: 8
                  width: 100
                  text_font: MONTSERRAT_34
                  text_color: !lambda |-
                    if( (id(zone1_limit_value) == 0) || (id(zone1_value) < id(zone1_limit_value)) ) {
                    return lv_color_hex(${Limit_text_Color}); // user-defined color
                      } else {
                      return lv_color_hex(0xff0000); // red
                    }
                  text: !lambda |-
                    if( id(zone1_value) < 1500) {return (to_string(static_cast<int>(id(zone1_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 1;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone1_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone1_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}1 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone1_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: zone1_limit_label2
                  x: 0
                  y: 64
                  width: 100
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(zone1_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(zone1_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # zone 2 object with Labels and line
        - obj:
            id: zone2_obj2
            x: 126
            y: 28
            styles: zone_obj_style
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: zone2_label2
                  x: 0
                  y: 8
                  width: 100
                  text_font: MONTSERRAT_34
                  text_color: !lambda |-
                    if( (id(zone2_limit_value) == 0) || (id(zone2_value) < id(zone2_limit_value)) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                      } else {
                      return lv_color_hex(0xff0000); // red
                    }
                  text: !lambda |-
                    if( id(zone2_value) < 1500) {return (to_string(static_cast<int>(id(zone2_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 2;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone2_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone2_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}2 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone2_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: zone2_limit_label2
                  x: 0
                  y: 64
                  width: 100
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(zone2_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(zone2_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # zone 3 object with Labels and line
        - obj:
            id: zone3_obj2
            x: 246
            y: 28
            styles: zone_obj_style
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: zone3_label2
                  x: 0
                  y: 8
                  width: 100
                  text_font: MONTSERRAT_34
                  text_color: !lambda |-
                    if( (id(zone3_limit_value) == 0) || (id(zone3_value) < id(zone3_limit_value)) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                      } else {
                      return lv_color_hex(0xff0000); // red
                    }
                  text: !lambda |-
                    if( id(zone3_value) < 1500) {return (to_string(static_cast<int>(id(zone3_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 3;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone3_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone3_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}3 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone3_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: zone3_limit_label2
                  x: 0
                  y: 64
                  width: 100
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(zone3_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(zone3_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # zone 4 object with Labels and line
        - obj:
            id: zone4_obj2
            x: 366
            y: 28
            styles: zone_obj_style
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: zone4_label2
                  x: 0
                  y: 8
                  width: 100
                  text_font: MONTSERRAT_34
                  text_color: !lambda |-
                    if( (id(zone4_limit_value) == 0) || (id(zone4_value) < id(zone4_limit_value)) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                      } else {
                      return lv_color_hex(0xff0000); // red
                    }
                  text: !lambda |-
                    if( id(zone4_value) < 1500) {return (to_string(static_cast<int>(id(zone4_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 4;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone4_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone4_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}4 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone4_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: zone4_limit_label2
                  x: 0
                  y: 64
                  width: 100
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(zone4_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(zone4_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # one common headline for all sensors
        - label:
            id: sensors_headline2
            x: 12
            y: 140
            width: 460
            text_font: MONTSERRAT_20
            text_align: left
            text: "Temperatursensoren"
            hidden: !lambda |-
              if( id(active_sensors) == 0 ) {
                return true;
              } else {
                return false;
              }

        # timer
        - label:
            id: timer_value2
            x: 380
            y: 140
            width: 100
            text_font: MONTSERRAT_20
            text_align: left
            text: "--:--:--"
            hidden: ${Disable_Timer}
            clickable: 'true'
            on_press:
              - lambda: |-
                  id(page_index) = 2;
              - lvgl.page.show: timer_page

        # grey rectangle which combines the sensor objects
        - obj:
            id: sensors_obj2
            x: 6
            y: 168
            width: 464
            height: 112
            bg_color: 0x333333
            pad_all: 0
            outline_width: 0
            outline_color: 0
            border_width: 0
            border_color: 0
            border_side: NONE
            outline_pad: 0
            radius: 10
            hidden: !lambda |-
              if( id(active_sensors) == 0 ) {
                return true;
              } else {
                return false;
              }

        # sensor 1 object with Labels and line
        - obj:
            id: sensor1_obj2
            x: 10
            y: 172
            styles: sensor_obj_style
            hidden: !lambda |-
              if( (id(sensor1_value) < 1500) || (id(sensor1_limit_value) > 0) || (id(hide_inactive_sensors) == false) ) {
                id(active_sensors) |= 0x01;
                return false;
              } else {
                id(active_sensors) &= ~0x01;
                return true;
              }
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: sensor1_label2
                  x: 0
                  y: 8
                  width: 100
                  text_font: MONTSERRAT_34
                  text: !lambda |-
                    if( (id(sensor1_value) < 1500) && (id(sensor1_value) > 0) ) {
                      return (to_string(static_cast<int>(id(sensor1_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor1_limit_value) == 0) || (id(sensor1_value) < id(sensor1_limit_value) && id(sensor1_value) < 1500) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 5;
                        id(sensor_max_value) = ${Sensor1_Max};
                        id(sensor_limit_value) = id(sensor1_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor1_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor1_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}1 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor1_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: sensor1_limit_label2
                  x: 0
                  y: 64
                  width: 100
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(sensor1_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(sensor1_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # sensor 2 object with Labels and line
        - obj:
            id: sensor2_obj2
            x: 127
            y: 172
            styles: sensor_obj_style
            hidden: !lambda |-
              if( (id(sensor2_value) < 1500) || (id(sensor2_limit_value) > 0) || (id(hide_inactive_sensors) == false) ) {
                id(active_sensors) |= 0x02;
                return false;
              } else {
                id(active_sensors) &= ~0x02;
                return true;
              }
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: sensor2_label2
                  x: 0
                  y: 8
                  width: 100
                  text_font: MONTSERRAT_34
                  text: !lambda |-
                    if( (id(sensor2_value) < 1500) && (id(sensor2_value) > 0) ) {
                      return (to_string(static_cast<int>(id(sensor2_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor2_limit_value) == 0) || (id(sensor2_value) < id(sensor2_limit_value) && id(sensor2_value) < 1500) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 6;
                        id(sensor_max_value) = ${Sensor2_Max};
                        id(sensor_limit_value) = id(sensor2_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor2_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor2_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}2 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor2_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: sensor2_limit_label2
                  x: 0
                  y: 64
                  width: 100
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(sensor2_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(sensor2_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # sensor 3 object with Labels and line
        - obj:
            id: sensor3_obj2
            x: 245
            y: 172
            styles: sensor_obj_style
            hidden: !lambda |-
              if( (id(sensor3_value) < 1500) || (id(sensor3_limit_value) > 0) || (id(hide_inactive_sensors) == false) ) {
                id(active_sensors) |= 0x04;
                return false;
              } else {
                id(active_sensors) &= ~0x04;
                return true;
              }
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: sensor3_label2
                  x: 0
                  y: 8
                  width: 100
                  text_font: MONTSERRAT_34
                  text: !lambda |-
                    if( (id(sensor3_value) < 1500) && (id(sensor3_value) > 0) ) {
                      return (to_string(static_cast<int>(id(sensor3_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor3_limit_value) == 0) || (id(sensor3_value) < id(sensor3_limit_value) && id(sensor3_value) < 1500) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 7;
                        id(sensor_max_value) = ${Sensor3_Max};
                        id(sensor_limit_value) = id(sensor3_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor3_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor3_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}3 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor3_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: sensor3_limit_label2
                  x: 0
                  y: 64
                  width: 100
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(sensor3_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(sensor3_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # sensor 4 object with Labels and line
        - obj:
            id: sensor4_obj2
            x: 362
            y: 172
            styles: sensor_obj_style
            hidden: !lambda |-
              if( (id(sensor4_value) < 1500) || (id(sensor4_limit_value) > 0) || (id(hide_inactive_sensors) == false) ) {
                id(active_sensors) |= 0x08;
                return false;
              } else {
                id(active_sensors) &= ~0x08;
                return true;
              }
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: sensor4_label2
                  x: 0
                  y: 8
                  width: 100
                  text_font: MONTSERRAT_34
                  text: !lambda |-
                    if( (id(sensor4_value) < 1500) && (id(sensor4_value) > 0) ) {
                      return (to_string(static_cast<int>(id(sensor4_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor4_limit_value) == 0) || (id(sensor4_value) < id(sensor4_limit_value) && id(sensor4_value) < 1500) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: ${Enable_Temperature_Limits}
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 8;
                        id(sensor_max_value) = ${Sensor4_Max};
                        id(sensor_limit_value) = id(sensor4_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor4_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor4_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}4 Temperaturlimit:";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor4_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: sensor4_limit_label2
                  x: 0
                  y: 64
                  width: 100
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(sensor4_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(sensor4_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # gas object with gas values in % and g
        - obj:
            id: gas_obj2
            x: 0
            y: 294
            styles: gas_obj_style
            widgets:
              - label:
                  x: 12
                  y: 0
                  text_font: MONTSERRAT_20
                  text_align: LEFT
                  text: 'Gas:'
              - label:
                  id: gas_percent_label2
                  x: 260
                  y: 0
                  text_font: MONTSERRAT_20
                  text: '-- %'
              - label:
                  id: gas_weight_label2
                  x: 344
                  y: 0
                  text_font: MONTSERRAT_20
                  text_align: right
                  text: '--- g'
              - bar:
                  id: gas_percent_bar2
                  x: 80
                  y: 6
                  height: 12
                  width: 200
                  radius: 5
                  min_value: 1
                  max_value: 100
                  bg_color: 0xffffff
                  indicator:
                    bg_color: ${Gas_Bar_Color2}
                  value: 0

        # symbol for battery low warning
        - obj:
            id: battery_symbol_obj2
            x: 420
            y: 0
            width: 60
            height: 24
            bg_color: 0
            pad_all: 0
            outline_width: 0
            outline_color: 0
            border_width: 0
            border_color: 0
            border_side: NONE
            outline_pad: 0
            radius: 0
            hidden: ${Hide_Battery_Symbol}
            widgets:
              - line:
                  id: battery_symbol2
                  points:
                    - 12, 2
                    - 18, 2
                    - 17, 2
                    - 17, 4
                    - 17, 3
                    - 20, 3
                    - 19, 3
                    - 19, 20
                    - 19, 19
                    - 10, 19
                    - 11, 19
                    - 11, 2
                    - 11, 3
                    - 14, 3
                  line_width: 2
                  line_rounded: false
                  line_color: !lambda |-
                    if( id(battery_soc_value) <= id(min_soc_value) ) {
                      return lv_color_hex(0xff0000); // red
                      } else {
                      return lv_color_hex(0xffffff); // white
                    }
              - bar:
                  id: battery_bar2
                  x: 12
                  y: 3
                  height: 15
                  width: 6
                  radius: 0
                  min_value: 0
                  max_value: 100
                  bg_color: 0
                  indicator:
                    radius: 0
                    bg_color:  !lambda |-
                      if( id(battery_soc_value) <= id(min_soc_value) ) {
                        return lv_color_hex(0xff0000); // red
                        } else {
                        return lv_color_hex(0xffffff); // white
                      }
                  value: !lambda return id(battery_soc_value);
              - label:
                  id: battery_soc_label2
                  x: 25
                  y: 3
                  text_font: MONTSERRAT_14
                  text_align: CENTER
                  width: 35
                  text_color: !lambda |-
                    if( id(battery_soc_value) <= id(min_soc_value) ) {
                      return lv_color_hex(0xff0000); // red
                      } else {
                      return lv_color_hex(0xffffff); // white
                    }
                  text: !lambda |-
                    return (to_string(static_cast<int>(id(battery_soc_value)))+"%").c_str();

        # symbol for successfull BT connection
        - label:
            id: g32bt_connect_label2
            x: 390
            y: 0
            text_font: MONTSERRAT_18
            text_color: 0x00ff00
            text_align: CENTER
            width: 30
            text: "\uF293" # BT symbol
            hidden: true

        # symbol for successfull WIFI connection
        - label:
            id: wifi_connect_label2
            x: 360
            y: 0
            text_font: MONTSERRAT_18
            text_color: 0x00ff00
            text_align: CENTER
            width: 30
            text: "\uF1EB" # WIFI symbol
            hidden: true

        # symbol for 'light on'
        - label:
            id: light_on_label2
            x: 330
            y: 0
            text_font: MONTSERRAT_18
            text_color: 0xffff00
            text_align: CENTER
            width: 30
            text: "\uF0E7" # lightning
            hidden: true

        # symbol for 'firebox open'
        - label:
            id: firebox_open_label2
            x: 300
            y: 0
            text_font: MONTSERRAT_18
            text_color: 0x00ff00
            text_align: CENTER
            width: 30
            text: "\uF093" # arrow up
            hidden: true

        # time string hours:minutes
        - label:
            id: display_time2
            x: 200
            y: 0
            text_font: MONTSERRAT_20
            text_color: 0xffffff
            text_align: LEFT
            width: 100
            text: "00:00:00"
            hidden: true

        # symbol for gas low warning
        - label:
            id: g32_warning_label2
            x: 120
            y: 0
            text_font: MONTSERRAT_18
            text_color: 0xff0000
            text_align: CENTER
            width: 30
            text: "\uF071" # invertiertes Ausrufungszeichen
            hidden: true

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    - id: timer_page
      skip: true
      pad_all: 0
      widgets:
        - label:
            id: timer_headline_label
            x: 0
            y: 10
            width: 440
            text_font: MONTSERRAT_26
            text_align: LEFT
            text: "Timer:"

        - roller:
            id: timer_roller_h
            x: 135
            y: 100
            width: 50
            text_font: MONTSERRAT_20
#            options: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]
            options: ['00','01','02','03','04','05','06','07','08','09',10,11,12,13,14,15,16,17,18,19,20,21,22,23]
            selected:
              bg_color: 0x555555
            on_value:
              - lambda: |-
                  id(helper_h) = x;
        - label:
            x: 135
            y: 70
            width: 50
            text_font: MONTSERRAT_20
            text_align: CENTER
            text: "H"
        - label:
            x: 185
            y: 154
            width: 30
            text_font: MONTSERRAT_20
            text_align: CENTER
            text: ":"

        - roller:
            id: timer_roller_m
            x: 215
            y: 100
            width: 50
            text_font: MONTSERRAT_20
            options: ['00','01','02','03','04','05','06','07','08','09',10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]
            selected:
              bg_color: 0x555555
            on_value:
              - lambda: |-
                  id(helper_m) = x;
        - label:
            x: 215
            y: 70
            width: 50
            text_font: MONTSERRAT_20
            text_align: CENTER
            text: "M"
        - label:
            x: 265
            y: 154
            width: 30
            text_font: MONTSERRAT_20
            text_align: CENTER
            text: ":"

        - roller:
            id: timer_roller_s
            x: 295
            y: 100
            width: 50
            text_font: MONTSERRAT_20
            options: ['00','01','02','03','04','05','06','07','08','09',10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]
            selected:
              bg_color: 0x555555
            on_value:
              - lambda: |-
                  id(helper_s) = x;
        - label:
            x: 295
            y: 70
            width: 50
            text_font: MONTSERRAT_20
            text_align: CENTER
            text: "S"

        - button:
            x: 200
            y: 260
            width: 80
            height: 40
            bg_color: 0x555555
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "CLR"
            on_click:
              then:
                - lvgl.roller.update:
                    id: [timer_roller_h, timer_roller_m, timer_roller_s]
                    selected_index: 0
                - lambda: |-
                    id(helper_h) = 0;
                    id(helper_m) = 0;
                    id(helper_s) = 0;
                    id(timer_alarm) = false;
                    id(timer_active) = false;

        - button:
            x: 370
            y: 260
            width: 80
            height: 40
            bg_color: 0x555555
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "OK"
            on_click:
              - lambda: |-
                  id(timer_h) = id(helper_h);
                  id(timer_m) = id(helper_m);
                  id(timer_s) = id(helper_s);
                  if( id(timer_h) > 0 || id(timer_m) > 0 || id(timer_s) > 0 ){
                    id(timer_active) = true;
                    id(timer_alarm) = false;
                  }
              - if:
                  condition:
                    lambda: 'return id(page_index) == 1;'
                  then:
                    - lvgl.page.show: arcs_page
                  else:
                    - lvgl.page.show: numbers_page

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    - id: sensor_limits_page
      skip: true
      pad_all: 0
      widgets:
        - label:
            id: sensor_limit_headline_label
            x: 0
            y: 10
            width: 440
            text_font: MONTSERRAT_26
            text_align: LEFT
            text: "Sensor x Temperaturlimit:"
        - label:
            id: sensor_limit_label
            x: 350
            y: 10
            text_font: MONTSERRAT_26
            text_align: RIGHT
            text: "0°C"
        - slider:
            id: sensor_limit_slider
            x: 115
            y: 100
            height: 20
            width: 250
            radius: 5
            min_value: 0
            max_value: 500
            bg_color: 0xffffff
            indicator:
              bg_color: 0xff0000
            knob:
              bg_color: 0xff0000
            value: !lambda return id(sensor_limit_value);
            adv_hittest: true
            on_value:
              - lambda: id(sensor_limit_value) = x;
              - lvgl.label.update:
                  id: sensor_limit_label
                  text: !lambda |-
                    if( x <= id(sensor_max_value) ) {
                      return (to_string(static_cast<int>(x))+"°C").c_str();
                    } else {
                      return (to_string(static_cast<int>(id(sensor_max_value)))+"°C").c_str();
                    }
        - button:
            x: 30
            y: 90
            width: 60
            height: 40
            bg_color: 0x333333
            clickable: true
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "-1"
            on_click:
              - lambda: |-
                  if (id(sensor_limit_value) > 0) {
                    id(sensor_limit_value) -= 1;
                  } else {
                    id(sensor_limit_value) = 0;
                  }
              - lvgl.slider.update:
                  id: sensor_limit_slider
                  value: !lambda return id(sensor_limit_value);
        - button:
            x: 30
            y: 140
            width: 60
            height: 40
            bg_color: 0x333333
            clickable: true
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "-10"
            on_click:
              - lambda: |-
                  if (id(sensor_limit_value) >= 10) {
                    id(sensor_limit_value) -= 10;
                  } else {
                    id(sensor_limit_value) = 0;
                  }
              - lvgl.slider.update:
                  id: sensor_limit_slider
                  value: !lambda return id(sensor_limit_value);
        - button:
            x: 30
            y: 190
            width: 60
            height: 40
            bg_color: 0x333333
            clickable: true
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "-100"
            on_click:
              - lambda: |-
                  if (id(sensor_limit_value) >= 100) {
                    id(sensor_limit_value) -= 100;
                  } else {
                    id(sensor_limit_value) = 0;
                  }
              - lvgl.slider.update:
                  id: sensor_limit_slider
                  value: !lambda return id(sensor_limit_value);
        - button:
            x: 390
            y: 90
            width: 60
            height: 40
            bg_color: 0x333333
            clickable: true
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "+1"
            on_click:
              - lambda: |-
                  if (id(sensor_limit_value) < id(sensor_max_value)) {
                    id(sensor_limit_value) += 1;
                  } else {
                    id(sensor_limit_value) = id(sensor_max_value);
                  }
              - lvgl.slider.update:
                  id: sensor_limit_slider
                  value: !lambda return id(sensor_limit_value);
        - button:
            x: 390
            y: 140
            width: 60
            height: 40
            bg_color: 0x333333
            clickable: true
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "+10"
            on_click:
              - lambda: |-
                  if (id(sensor_limit_value) <= (id(sensor_max_value)-10)) {
                    id(sensor_limit_value) += 10;
                  } else {
                    id(sensor_limit_value) = id(sensor_max_value);
                  }
              - lvgl.slider.update:
                  id: sensor_limit_slider
                  value: !lambda return id(sensor_limit_value);

        - button:
            x: 390
            y: 190
            width: 60
            height: 40
            bg_color: 0x333333
            clickable: true
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "+100"
            on_click:
              - lambda: |-
                  if (id(sensor_limit_value) <= (id(sensor_max_value)-100) ) {
                    id(sensor_limit_value) += 100;
                  } else {
                    id(sensor_limit_value) = id(sensor_max_value);
                  }
              - lvgl.slider.update:
                  id: sensor_limit_slider
                  value: !lambda return id(sensor_limit_value);

        - button:
            x: 200
            y: 260
            width: 80
            height: 40
            bg_color: 0x555555
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "CLR"
            on_click:
              then:
              - lambda: |-
                  id(sensor_limit_value) = 0;
              - lvgl.slider.update:
                  id: sensor_limit_slider
                  value: !lambda return id(sensor_limit_value);

        - button:
            x: 370
            y: 260
            width: 80
            height: 40
            bg_color: 0x555555
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "OK"
            on_click:
              then:
              - lambda: |-
                  switch ( id(sensor_index) ){
                    case 1:
                      id(zone1_limit_value) = id(sensor_limit_value);
                      break;
                    case 2:
                      id(zone2_limit_value) = id(sensor_limit_value);
                      break;
                    case 3:
                      id(zone3_limit_value) = id(sensor_limit_value);
                      break;
                    case 4:
                      id(zone4_limit_value) = id(sensor_limit_value);
                      break;
                    case 5:
                      id(sensor1_limit_value) = id(sensor_limit_value);
                      if( id(sensor1_limit_value) == 0 )  id(active_sensors) &= ~0x01;
                      break;
                    case 6:
                      id(sensor2_limit_value) = id(sensor_limit_value);
                      if( id(sensor2_limit_value) == 0 )  id(active_sensors) &= ~0x02;
                      break;
                    case 7:
                      id(sensor3_limit_value) = id(sensor_limit_value);
                      if( id(sensor3_limit_value) == 0 )  id(active_sensors) &= ~0x04;
                      break;
                    case 8:
                      id(sensor4_limit_value) = id(sensor_limit_value);
                      if( id(sensor4_limit_value) == 0 )  id(active_sensors) &= ~0x08;
                      break;
                  }
              # refresh all widgets on arcs_page
              - lvgl.widget.refresh: [zone1_limit_arc, zone2_limit_arc, zone3_limit_arc, zone4_limit_arc]
              - lvgl.widget.refresh: [sensor1_obj, sensor2_obj, sensor3_obj, sensor4_obj]
              - lvgl.widget.refresh: [sensor1_limit_arc, sensor2_limit_arc, sensor3_limit_arc, sensor4_limit_arc]
              - lvgl.widget.refresh: [zone1_label, zone2_label, zone3_label, zone4_label]
              - lvgl.widget.refresh: [sensor1_label, sensor2_label, sensor3_label, sensor4_label]
              - lvgl.widget.refresh: sensors_headline
              # refresh all widgets on numbers_page
              - lvgl.widget.refresh: [zone1_limit_label2, zone2_limit_label2, zone3_limit_label2, zone4_limit_label2]
              - lvgl.widget.refresh: [sensor1_obj2, sensor2_obj2, sensor3_obj2, sensor4_obj2]
              - lvgl.widget.refresh: [sensor1_limit_label2, sensor2_limit_label2, sensor3_limit_label2, sensor4_limit_label2]
              - lvgl.widget.refresh: [zone1_label2, zone2_label2, zone3_label2, zone4_label2]
              - lvgl.widget.refresh: [sensor1_label2, sensor2_label2, sensor3_label2, sensor4_label2]
              - lvgl.widget.refresh: sensors_headline2
              - lvgl.widget.redraw:
              - if:
                  condition:
                    lambda: 'return id(page_index) == 1;'
                  then:
                    - lvgl.page.show: arcs_page
                  else:
                    - lvgl.page.show: numbers_page


sensor:
  - platform: adc
    pin: 5
    name: "Battery SOC"
    unit_of_measurement: "%"
    state_class: measurement
    device_class: battery
    accuracy_decimals: 2       # ???
    attenuation: 12db          # input voltage range: 150mV --- 2450mV
    samples: 16                # samples taken per update interval
    filters:
      - multiply: 1.72         # due to external voltage divider on adc input
      - sliding_window_moving_average:
          window_size: 15      # average over 15 values
      - calibrate_linear:      # linearise voltage->SOC dependency
          method: exact
          datapoints:
            - 3.00 ->   0.0    # <=3.00V = battery empty (0.0%)
            - 3.36 ->   5.0
            - 3.41 ->  10.0
            - 3.48 ->  20.0
            - 3.52 ->  30.0
            - 3.56 ->  40.0
            - 3.61 ->  50.0
            - 3.70 ->  60.0
            - 3.79 ->  70.0
            - 3.89 ->  80.0
            - 4.00 ->  90.0
            - 4.05 -> 100.0    # >=4.05V = battery full (100.0%)
      - clamp:
          min_value: 0.0
          max_value: 100.0
    update_interval: 4s        # new value after 4s*15(=window size) = 60s!
    on_value:
      - lambda: id(battery_soc_value) = x;
      - lvgl.widget.refresh: [battery_soc_label, battery_symbol, battery_bar]
      - lvgl.widget.refresh: [battery_soc_label2, battery_symbol2, battery_bar2]
      - lvgl.bar.update:
          id: battery_bar
          indicator:
            bg_color:  !lambda |-
              if( id(battery_soc_value) <= id(min_soc_value) ) {
                return lv_color_hex(0xff0000); // red
                } else {
                return lv_color_hex(0x00ff00); // green
              }
      - lvgl.bar.update:
          id: battery_bar2
          indicator:
            bg_color:  !lambda |-
              if( id(battery_soc_value) <= id(min_soc_value) ) {
                return lv_color_hex(0xff0000); // red
                } else {
                return lv_color_hex(0xffffff); // white
              }

  - platform: ble_rssi
    mac_address: ${g32_mac_address}
    name: "BT Signalstärke"
  - platform: wifi_signal
    name: "WiFi Signal ESP G32"
    update_interval: 10s
  - platform: internal_temperature
    name: "CPU Temperatur ESP G32"
    update_interval: 10s

  - platform: ble_client
    ble_client_id: ow_g32
    type: characteristic
    name: "G32 Datablock Read"
    service_uuid: 'dc0f41ea-b6ae-46a8-a19e-1a3bf4342bcb'
    characteristic_uuid: 'dc0f41e2-b6ae-46a8-a19e-1a3bf4342bcb'
    update_interval: 10s
    lambda: |-
      float t = (x[6]*10.0+x[7]/10.0);
      id(g32_zone1).publish_state(t);
      t = (x[8]*10.0+x[9]/10.0);
      id(g32_zone2).publish_state(t);
      t = (x[10]*10.0+x[11]/10.0);
      id(g32_zone3).publish_state(t);
      t = (x[12]*10.0+x[13]/10.0);
      id(g32_zone4).publish_state(t);
      t = (x[14]*10.0+x[15]/10.0);
      id(g32_probe1).publish_state(t);
      t = (x[16]*10.0+x[17]/10.0);
      id(g32_probe2).publish_state(t);
      t = (x[18]*10.0+x[19]/10.0);
      id(g32_probe3).publish_state(t);
      t = (x[20]*10.0+x[21]/10.0);
      id(g32_probe4).publish_state(t);
      t = (x[22]*256+x[23]);
      id(g32_gas_weight).publish_state(t);
      t = (x[24]);
      id(g32_firebox_open).publish_state(t);
      t = (x[25]);
      id(g32_light_on).publish_state(t);
      t = (x[31]);
      id(g32_gas_percent).publish_state(t);
      return (x[30]);

  - platform: template
    name: "G32 Zone 1"
    id: g32_zone1
    device_class: "temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    on_value:
      - lambda: id(zone1_value) = x;
      - lvgl.widget.refresh: [zone1_label, zone1_arc, zone1_label2]

  - platform: template
    name: "G32 Zone 2"
    id: g32_zone2
    device_class: "temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    on_value:
      - lambda: id(zone2_value) = x;
      - lvgl.widget.refresh: [zone2_label, zone2_arc, zone2_label2]

  - platform: template
    name: "G32 Zone 3"
    id: g32_zone3
    device_class: "temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    on_value:
      - lambda: id(zone3_value) = x;
      - lvgl.widget.refresh: [zone3_label, zone3_arc, zone3_label2]

  - platform: template
    name: "G32 Zone 4"
    id: g32_zone4
    device_class: "temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    on_value:
      - lambda: id(zone4_value) = x;
      - lvgl.widget.refresh: [zone4_label, zone4_arc, zone4_label2]

  - platform: template
    name: "G32 Sensor 1"
    id: g32_probe1
    device_class: "temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    on_value:
      - lambda: id(sensor1_value) = x;
      - lvgl.widget.refresh: [sensor1_label, sensor1_arc, sensor1_obj, sensors_headline]
      - lvgl.widget.refresh: [sensor1_label2, sensor1_obj2, sensors_headline2, sensors_obj2]

  - platform: template
    name: "G32 Sensor 2"
    id: g32_probe2
    device_class: "temperature"
    unit_of_measurement: "°C"
    on_value:
      - lambda: id(sensor2_value) = x;
      - lvgl.widget.refresh: [sensor2_label, sensor2_arc, sensor2_obj, sensors_headline]
      - lvgl.widget.refresh: [sensor2_label2, sensor2_obj2, sensors_headline2, sensors_obj2]

  - platform: template
    name: "G32 Sensor 3"
    id: g32_probe3
    device_class: "temperature"
    unit_of_measurement: "°C"
    on_value:
      - lambda: id(sensor3_value) = x;
      - lvgl.widget.refresh: [sensor3_label, sensor3_arc, sensor3_obj, sensors_headline]
      - lvgl.widget.refresh: [sensor3_label2, sensor3_obj2, sensors_headline2, sensors_obj2]

  - platform: template
    name: "G32 Sensor 4"
    id: g32_probe4
    device_class: "temperature"
    unit_of_measurement: "°C"
    on_value:
      - lambda: id(sensor4_value) = x;
      - lvgl.widget.refresh: [sensor4_label, sensor4_arc, sensor4_obj, sensors_headline]
      - lvgl.widget.refresh: [sensor4_label2, sensor4_obj2, sensors_headline2, sensors_obj2]

  - platform: template
    name: "G32 Gasbuddy Füllstand in g"
    id: g32_gas_weight
    device_class: weight
    state_class: measurement
    unit_of_measurement: g
    icon: "mdi:weight-gram"
    on_value:
      - lvgl.label.update:
          id: [gas_weight_label, gas_weight_label2]
          text: !lambda |-
            if(x >= 11000) {return ("11000 g");
            } else {
              return (to_string(static_cast<int>(x)) + " g").c_str();
            }

  - platform: template
    name: "G32 Gasbuddy Füllstand in %"
    id: g32_gas_percent
    state_class: measurement
    unit_of_measurement: "%"
    icon: "mdi:gas-cylinder"
    on_value:
      - lvgl.label.update:
          id: [gas_percent_label, gas_percent_label2]
          text: !lambda |-
            if(x > 100) {return ("---");
            } else {
              return (to_string(static_cast<int>(x)) + " %").c_str();
            }
      - lvgl.bar.update:
          id: [gas_percent_bar, gas_percent_bar2]
          value: !lambda |-
            if(x > 100) {return (100);
            } else {
              return (x);
            }
      - lvgl.bar.update:
          id: gas_percent_bar
          indicator:
            bg_color: !lambda |-
              if( x <= id(min_gas_value) ) {
                return lv_color_hex(${Gas_Bar_Low_Color});
              } else {
                return lv_color_hex(${Gas_Bar_Color});
              }
      - lvgl.bar.update:
          id: gas_percent_bar2
          indicator:
            bg_color: !lambda |-
              if( x <= id(min_gas_value) ) {
                return lv_color_hex(${Gas_Bar_Low_Color2});
              } else {
                return lv_color_hex(${Gas_Bar_Color2});
              }


binary_sensor:
  - platform: gpio
    name: "Display Tilt Sensor"
    pin:
      number: GPIO18
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 200ms
      - delayed_off: 200ms
    on_press:
      - lambda: |-
          ESP_LOGD("custom","Display 90°");
    on_release:
      - lambda: |-
          ESP_LOGD("custom","Display 270°");

  - platform: status
    name: "Status ESP G32"

  - platform: template
    name: "G32 Licht"
    id: g32_light_on
    icon: "mdi:light-flood-down"
    on_state:
      - lvgl.label.update:
          id: [light_on_label, light_on_label2]
          hidden: !lambda return(!x);

  - platform: template
    name: "G32 Haube"
    id: g32_firebox_open
    device_class: "door"
    icon: "mdi:door"
    on_state:
      - lvgl.label.update:
          id: [firebox_open_label, firebox_open_label2]
          hidden: !lambda return(!x);

script:
  - id: time_update
    then:
      - lvgl.label.update:
          id: [display_time, display_time2]
          text: !lambda |-
            static char time_buf[16];
            auto now = id(ha_time).now();
            snprintf(time_buf, sizeof(time_buf), "%02d:%02d:%02d", now.hour, now.minute, now.second);
            return time_buf;
      - lvgl.label.update:
          id: [display_time, display_time2]
          hidden: !lambda |-
            return (!id(show_time));

  - id: timer_update
    then:
      - lvgl.label.update:
          id: timer_value
          text: !lambda |-
            if( id(timer_active) == true ) {
              if( id(timer_s) > 0 )
              {
                id(timer_s) -= 1;
              }
              else
              {
                if( id(timer_m) > 0 )
                {
                  id(timer_s) = 59;
                  id(timer_m) = id(timer_m) - 1;
                }
                else
                {
                  if( id(timer_h) > 0 )
                  {
                    id(timer_m) = 59;
                    id(timer_h) = id(timer_h) - 1;
                  }
                  else
                  {
                    if( id(timer_alarm) == false ) {
                      id(timer_alarm) = true;
                      id(my_rtttl).play("${Timer_Alarm_Sound}");
                    }
                  }
                }
              }
              if( id(timer_alarm) == false ) {
                static char time_buf[16];
                snprintf(time_buf, sizeof(time_buf), "%02d:%02d:%02d", id(timer_h), id(timer_m), id(timer_s));
                return time_buf;
              } else {
                return ("00:00:00");
              }
            } else {
              return ("-- : -- : --");
            }
      - lvgl.label.update:
          id: timer_value
          text_color: !lambda |-
            if( id(timer_alarm) == true ) {
              return lv_color_hex(0xff0000);
            } else {
              return lv_color_hex(0xffffff);
            }
      - lvgl.label.update:
          id: timer_value2
          text: !lambda |-
            if( id(timer_active) == true ) {
              if( id(timer_alarm) == false ) {
                static char time_buf[16];
                snprintf(time_buf, sizeof(time_buf), "%02d:%02d:%02d", id(timer_h), id(timer_m), id(timer_s));
                return time_buf;
              } else {
                return ("00:00:00");
              }
            } else {
              return ("-- : -- : --");
            }
          text_color: !lambda |-
            if( id(timer_alarm) == true ) {
              return lv_color_hex(0xff0000);
            } else {
              return lv_color_hex(0xffffff);
            }


