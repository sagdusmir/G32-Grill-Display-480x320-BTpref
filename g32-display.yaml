substitutions:
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  # bitte nur in diesen nächsten Zeilen Änderungen vornehmen                    #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # der Name des ESPHome Geräts (kann frei gewählt werden, keine Sonderzeichen)
  name: g32-display-bt90
  device_description: "Monitor an OW G32 grill"
  version: "BTpref 1.5.3"

  # Bluetooth MAC des G32 (z.B. zu finden mit der App nrf_Connect)
  g32_mac_address: 94:E6:86:00:00:00
  # g32_mac_address: !secret g32_mac_address  # oder optional als secret konfigurieren

  meater_mac_address: B8:1F:5E:00:00:00  # do not change

  # Credentials des eigenen Wifi Netzwerks
  wifi_ssid: "wifi_ssid"
  wifi_password: "password"
  # wifi_ssid: !secret wifi_ssid  # oder optional als secret konfigurieren
  # wifi_password: !secret wifi_password  # oder optional als secret konfigurieren

# hier die Daten aus dem neu erstellten ESPHome Gerät einfügen. Beispiel:
# Enable Home Assistant API
# api:
#   encryption:
#     key: "OZNMBo2xusQ+BIzO1pfIQepp72VCfBzCWO/pSttPCQg="
# den dort angezeigten key einfügen:
  api_encryption_key: "E1fyywUUE1DWzu0OzhDkyc4yAnfGwyEfsVNvhytrU6k="

# ota:
#   - platform: esphome
#     password: "7fdf9f656d36180bfba92d596c9e7db3"
# das angezeiget password einfügen:
  ota_password: "7fdf9f656d36180bfba92d596c9e7db3"

# benutzerdefinierbare Displayelemente  (nur noch für die Limits-Page!)
# Texte festlegen für Zonen und Sensoren (max. 8 Zeichen):
  Zone_Text:   "Zone "     # ergibt 'Zone 1', 'Zone 2' usw.
  Sensor_Text: "Sensor "   # ergibt 'Sensor 1', 'Sensor 2' usw.

# Farben für die 'Temperatur-Kreise' festlegen:
  Zone_Arc_Color:    "0xff0000"  # 0xff0000 = Rot
  Sensor_Arc_Color:  "0xffff00"  # 0xffff00 = Gelb

# Farben für die Temperatur-Limits Texte festlegen:
  Limit_text_Color:  "0xaaaaaa"  # 0xaaaaaa = Grau
#  Limit_text_Color:  "0xffb455"  # 0xffb455 = Orange

# Farbe für den 'Gas-Balken' auf der 'arcs page' festlegen:
  Gas_Bar_Color:      "0x00ff00"  # 0x00ff00 = Hellgrün
  Gas_Bar_Low_Color:  "0xff0000"  # 0xff0000 = Rot
# Farbe für den 'Gas-Balken' auf der 'numbers page' festlegen:
  Gas_Bar_Color2:     "0xaaaaaa"  # 0xaaaaaa = Grau
  Gas_Bar_Low_Color2: "0xff0000"  # 0xff0000 = Rot

# Batteriesymbol komplett ausgeblenden (kein Akku vorhanden)? true = ausblenden, false = anzeigen :
  Hide_Battery_Symbol: 'false'
# SOC (in %) des Akkus festlegen, unterhalb dessen das Batteriesymbol in rot angezeigt wird:
  Min_SOC: "25"

# Minimalwert für Gasmenge in % festlegen
  Min_Gas: "20"

# sollen inaktive Sensoren komplett ausgeblendet werden? true = ausblenden, false = anzeigen:
  Hide_Inactive_Sensors: 'false' # inaktive Sensoren werden angezeigt

# sollen für Zonen und Sensoren Temperaturlimits gesetzt werden können? true = Ja, false = Nein
  Enable_Temperature_Limits: 'true'

# Maximal-Temperatur für Sensoren setzen. Z.B. 130 (°C) für Kerntemperatur, 500 für Garraum:
  Sensor1_Max: "130"
  Sensor2_Max: "130"
  Sensor3_Max: "130"
  Sensor4_Max: "130"

  # Lautsprecher (Beeper) Lautsrtärke festlegen 1.0 = Maximum, 0.1 = sehr leise.
  # Hohe Werte können zu clipping führen. Ausprobieren.
  Beeper_Max: "0.8"

  # Zeitinterval für Lautsprecher (Beeper) Alarmmeldungen festlegen Default: 5s
  Beeper_interval: "5s"

  # Soundeffekte (in RTTTL syntax):
  G32_Connect_Sound: "pling2:d=16,o=6,b=140:e6,32p,d6"
  G32_Disconnect_Sound: "siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e"
  MT_Connect_Sound: "Pling4:d=16,o=5,b=100:a6,32p,a5"
  MT_Disconnect_Sound: "plonk:d=16,o=5,b=100:c"
  Wifi_Connect_Sound: "dadi:d=16,o=6,b=140:d6,32p,e6"
  Wifi_Disconnect_Sound: "siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e"
  Timer_Alarm_Sound: "didididi:d=16,o=6,b=140:e6,32p,e6,32p,e6,32p,e6"
  Zone_Limit_Alarm_Sound: "dadidadi:d=8,o=5,b=150:d,e,d,e,d,e,d,e"
  Sensor_Limit_Alarm_Sound: "didadida:d=8,o=5,b=150:e,d,e,d,e,d,e,d"
  New_MAC_Sound: "click:d=32,o=6,b=120:32c,32p"

  # Uhrzeit 11:32:45 oben in der Mitte der Statuszeile anzeigen?
  Show_Time: 'true'  # requires wifi

  # Timer ausblenden?
  Disable_Timer: 'false'

# welche Anzeigen sollen aktiv sein, die bunten 'Arcs' und/oder die grauen 'Zahlen'?
# Wenn beide aktiv, dann Wechsel zwischen den Anzeigen durch 'Swipen' nach rechts oder links
# anzeigen: 'true', nicht anzeigen: 'false' (mindestens eins sollte 'true' sein!)
  Show_Arcs_Page: 'true'
  Show_Numbers_Page: 'true'

# Display Timeout (schont Akku und Display). Touch reaktiviert das Display.
# Zeit bis zum Ausschalten festlegen (1-3600(s)). 0 deaktiviert die Funktion
# Display_Timeout: "300"
  Display_Timeout: "0"

  Invalid_Sensor_Value: '1500' # 1500 means invalid


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# ab hier bitte nur Änderungen vornehmen, wenn man weiß, was man tut und will #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
esphome:
  name: ${name}
  build_path: /tmp/esphome_build
  platformio_options:
    upload_speed: 921600
    board_build.flash_mode: dio
    board_build.f_flash: 80000000L
    board_build.f_cpu: 240000000L

  project:
    name: "g32.bt_display480_320"
    version: ${version}

  on_boot:
    priority: 1100 # stay above 1000 and below 1500!
    then:
      - lambda: id(boot_start_time) = millis();

esp32:
  board: esp32-s3-devkitc-1
  # variant: esp32S3  # use either board: or varian
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      # CONFIG_ESP_TASK_WDT_EN: n  # Disables Task Watchdog Timer (TWDT)
      # CONFIG_ESP_INT_WDT: n      # Disables Interrupt Watchdog Timer (IWDT)
      COMPILER_OPTIMIZATION_SIZE: "y"  # no obvious improvements
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: "y"
      CONFIG_SPIRAM_RODATA: "y"

psram:
  mode: octal
  speed: 80MHz # 120mhz is not supported and falls back to 40mhz

# Enable logging
logger:
  baud_rate: 921600

# Enable Home Assistant API
api:
  encryption:
    key: ${api_encryption_key}
  reboot_timeout: 0s

ota:
  - platform: esphome
    password: ${ota_password}

wifi:
  id: my_wifi
  ssid: ${wifi_ssid}  # must be dynamically applied later
  password: ${wifi_password}  # must be dynamically applied later
  fast_connect: True
  reboot_timeout: 0s
  on_connect:
    then:
      - lvgl.widget.update:
          id: wifi_connect_label
          hidden: false
      - rtttl.play: ${Wifi_Connect_Sound}
      - globals.set:
          id: wifi_connected
          value: 'true'
      - globals.set:
          id: apply_wifi_started_by_user
          value: 'false'
  on_disconnect:
    then:
      - lvgl.widget.update:
          id: wifi_connect_label
          hidden: true
      - if: # no sound if user updated credentials
          condition:
            - lambda: |-
                return !(id(apply_wifi_started_by_user));
          then:
            - rtttl.play: ${Wifi_Disconnect_Sound}
      - globals.set:
          id: wifi_connected
          value: 'false'

# esp32_ble:
#   max_connections: 5  # new option since 2025-10-15, used to be under the esp32_ble_tracker component

esp32_ble_tracker:
  max_connections: 5  # before 2025-10-15. Recently moved to esp32_ble component!
  on_ble_advertise:
    then:
      - lambda: |-
          if (x.get_name().rfind("OWG-G32C", 0) == 0 && id(ble_g32_scan_started_by_user)) {
            id(settings_g32_mac_address) = x.address_str();
            lv_obj_clear_flag(id(settings_mac_address_updated), LV_OBJ_FLAG_HIDDEN);
            id(my_rtttl).play("${New_MAC_Sound}");
            ESP_LOGI("ble_adv", "G32 MAC address: %s", x.address_str().c_str());
            id(ble_g32_scan_stop).execute();
          }

          // TODO raus. Nur zum Testen.
          // if (x.get_name().rfind("MEATER", 0) == 0 && id(ble_g32_scan_started_by_user)) {
          //   id(settings_g32_mac_address) = x.address_str();
          //   id(my_rtttl).play("${New_MAC_Sound}");
          //   ESP_LOGI("ble_adv", "MAC address: %s", x.address_str().c_str());
          //   id(ble_g32_scan_stop).execute();
          // }

          // some logging
          // if (x.get_name().rfind("OWG-G32C", 0) == 0) {
          //   ESP_LOGI("ble_adv", "G32 gefunden");
          //   ESP_LOGI("ble_adv", "  Name: %s", x.get_name().c_str());
          //   ESP_LOGI("ble_adv", "  MAC address: %s", x.address_str().c_str());
          // }
          // if (x.get_name().rfind("MEATER+", 0) == 0) {
          //   ESP_LOGI("ble_adv", "Meater+ gefunden");
          //   ESP_LOGI("ble_adv", "  Name: %s", x.get_name().c_str());
          //   ESP_LOGI("ble_adv", "  MAC address: %s", x.address_str().c_str());
          // }
          // if (x.get_name() == "MEATER") {
          //   ESP_LOGI("ble_adv", "Meater gefunden");
          //   ESP_LOGI("ble_adv", "  Name: %s", x.get_name().c_str());
          //   ESP_LOGI("ble_adv", "  MAC address: %s", x.address_str().c_str());
          // }
          // if (x.get_name() == "MEATER BLOCK") {
          //   ESP_LOGI("ble_adv", "Meater Block gefunden");
          //   ESP_LOGI("ble_adv", "  Name: %s", x.get_name().c_str());
          //   ESP_LOGI("ble_adv", "  MAC address: %s", x.address_str().c_str());
          // }

          // log everything we get on advertise
          // ESP_LOGD("ble_adv", "New BLE device");
          // ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
          // ESP_LOGD("ble_adv", "  RSSI: %d", x.get_rssi());
          // ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
          // ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
          // for (auto uuid : x.get_service_uuids()) {
          //   ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
          // }
          // ESP_LOGD("ble_adv", "  Advertised service data:");
          // for (auto data : x.get_service_datas()) {
          //   ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
          //   // To log the actual data bytes, you can add a loop here
          //   std::string hex_data;
          //   for (auto byte : data.data) {
          //       char buf[3];
          //       sprintf(buf, "%02X ", byte);
          //       hex_data += buf;
          //     }
          //   ESP_LOGD("ble_adv", "      data: %s", hex_data.c_str());
          // }
          // ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
          // for (auto data : x.get_manufacturer_datas()) {
          //   ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
          //   // Similarly, log the data bytes
          //   std::string hex_data;
          //   for (auto byte : data.data) {
          //       char buf[3];
          //       sprintf(buf, "%02X ", byte);
          //       hex_data += buf;
          //     }
          //   ESP_LOGD("ble_adv", "      data: %s", hex_data.c_str());
          // }

      - lvgl.widget.refresh: settings_mac_address_label

ble_client:
  - mac_address: ${g32_mac_address}  # must be dynamically applied later
    id: ow_g32
    on_connect:
      then:
        - lvgl.widget.show: g32bt_connect_label
        - rtttl.play: ${G32_Connect_Sound}
        - globals.set:
            id: g32_connected
            value: 'true'
    on_disconnect:
      then:
        - lvgl.widget.update:
            id: g32bt_connect_label
            hidden: true
        - lvgl.widget.hide: [zone1_label, zone2_label, zone3_label, zone4_label]
        - lvgl.widget.hide: [sensor1_label, sensor2_label, sensor3_label, sensor4_label]
        - lvgl.widget.hide: [gas_percent_label, gas_weight_label, gas_percent_bar]
        - rtttl.play: ${G32_Disconnect_Sound}
        - globals.set:
            id: g32_connected
            value: 'false'
  - mac_address: ${meater_mac_address}
    id: meater1
    on_connect:
      then:
        - rtttl.play: ${MT_Connect_Sound}
    on_disconnect:
      then:
        - rtttl.play: ${MT_Disconnect_Sound}
  - mac_address: ${meater_mac_address}
    id: meater2
    on_connect:
      then:
        - rtttl.play: ${MT_Connect_Sound}
    on_disconnect:
      then:
        - rtttl.play: ${MT_Disconnect_Sound}
  - mac_address: ${meater_mac_address}
    id: meater3
    on_connect:
      then:
        - rtttl.play: ${MT_Connect_Sound}
    on_disconnect:
      then:
        - rtttl.play: ${MT_Disconnect_Sound}
  - mac_address: ${meater_mac_address}
    id: meater4
    on_connect:
      then:
        - rtttl.play: ${MT_Connect_Sound}
    on_disconnect:
      then:
        - rtttl.play: ${MT_Disconnect_Sound}

#-------------------------------------------
# Display qspi
#-------------------------------------------
spi:
  id: display_qspi
  type: quad
  clk_pin: 47
  data_pins: [21, 48, 40, 39]

display:
  - platform: mipi_spi
    model: JC3248W535
#  - platform: qspi_dbi
#    model: axs15231    data_rate: 40MHz
    id: my_display
    spi_id: display_qspi
    dimensions:
      height: 320
      width: 480
    cs_pin:
      number: 45
      ignore_strapping_warning: true
    rotation: 90 # for landscape
#    rotation: 270 # for landscape inverted
#   auto_clear has to be seit to 'false' for lvgl!:
    auto_clear_enabled: false

#-------------------------------------------
# Touchscreen gt911 i2c
#-------------------------------------------
i2c:
  sda: 4
  scl: 8
  id: touchscreen_bus
# scan: true

touchscreen:
  - platform: axs15231
    id: my_touch
    display: my_display
    i2c_id: touchscreen_bus
    calibration:
      x_min: 1
      x_max: 480
      y_min: 1
      y_max: 320
    transform:
      swap_xy: true
# for 90° normal display orientation
      mirror_x: false
      mirror_y: true
# for 270° inverted display orientation
#      mirror_x: true
#      mirror_y: false
# for test purposes, touch coordinates can be logged
#    on_touch:
#      - lambda: |-
#          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
#            touch.x,
#            touch.y,
#            touch.x_raw,
#            touch.y_raw
#          );
    on_release:
      - if:
          condition: lvgl.is_paused
          then:
            - logger.log: "Display is resuming"
            # commented: stay where you are
            # - script.execute: show_temperatures_page
            - lvgl.resume:
            - lvgl.widget.redraw:
            - light.turn_on: backlight

#-------------------------------------------
# Internal outputs
#-------------------------------------------
output:
  - id: gpio_backlight_pwm
    platform: ledc
    pin: 1

  - id: helper_low_tilt
    platform: ledc
    pin: 17

  - id: helper_low_beeper
    platform: ledc
    pin: 14

  - platform: ledc
    pin: 9
    id: rtttl_out

#-------------------------------------------
# Internal lights
#-------------------------------------------
light:
  - id: backlight
    name: Backlight
    platform: monochromatic
    output: gpio_backlight_pwm
    restore_mode: ALWAYS_ON

#-------------------------------------------
# Internal RTTTL speaker
#-------------------------------------------
rtttl:
  id: my_rtttl
  output: rtttl_out
  gain: ${Beeper_Max}

interval:
  - interval: 1s
    then:
      - script.execute: timer_update

  - interval: ${Beeper_interval}
    then:
      - lambda: |-
          if( ((id(zone1_limit_value) > 0) && (id(zone1_value) >= id(zone1_limit_value)))
           || ((id(zone2_limit_value) > 0) && (id(zone2_value) >= id(zone2_limit_value)))
           || ((id(zone3_limit_value) > 0) && (id(zone3_value) >= id(zone3_limit_value)))
           || ((id(zone4_limit_value) > 0) && (id(zone4_value) >= id(zone4_limit_value))) ) {
            id(my_rtttl).play("${Zone_Limit_Alarm_Sound}");
          }
          else if ( ((id(sensor1_limit_value) > 0) && (id(sensor1_value) >= id(sensor1_limit_value)))
                 || ((id(sensor2_limit_value) > 0) && (id(sensor2_value) >= id(sensor2_limit_value)))
                 || ((id(sensor3_limit_value) > 0) && (id(sensor3_value) >= id(sensor3_limit_value)))
                 || ((id(sensor4_limit_value) > 0) && (id(sensor4_value) >= id(sensor4_limit_value))) ) {
            id(my_rtttl).play("${Sensor_Limit_Alarm_Sound}");
          }
          else if( id(timer_alarm) == true ) {
            id(my_rtttl).play("${Timer_Alarm_Sound}");
          }
  - interval: 1s
    then:
      - if:
          condition:
            and:
              - lambda: 'return !id(boot_screen_hidden);'
              - lambda: 'return millis() - id(boot_start_time) >= 3000;'
          then:
            - script.execute: hide_boot_screen

#-------------------------------------------
# Global varaibles
#-------------------------------------------
globals:
  - id: wifi_connected
    type: bool
    initial_value: 'false'
  - id: g32_connected
    type: bool
    initial_value: 'false'

  - id: ble_g32_scan_started_by_user  # for managing "scan" button status
    type: bool
    initial_value: 'false'
  - id: apply_wifi_started_by_user  # for supressing sounds
    type: bool
    initial_value: 'false'

  - id: settings_wifi_ssid_persistent
    type: std::string
    restore_value: true
    initial_value: '"${wifi_ssid}"'  # sses your existing secret as initial default
    max_restore_data_length: 32  # max SSID length
  - id: settings_wifi_ssid
    type: std::string
    initial_value: " "
  - id: settings_wifi_password_persistent
    type: std::string
    restore_value: true
    initial_value: '"${wifi_password}"'  # sses your existing secret as initial default
    max_restore_data_length: 64  # max password length
  - id: settings_wifi_password
    type: std::string
    initial_value: " "

  - id: boot_start_time
    type: uint32_t
    initial_value: '0'
  - id: boot_screen_hidden
    type: bool
    initial_value: 'false'

  - id: show_arcs_page
    type: bool
    initial_value: ${Show_Arcs_Page}
  - id: show_numbers_page
    type: bool
    initial_value: ${Show_Numbers_Page}

  - id: active_sensors      # bits set/reset for every active/inactive Sensor
    type: int
    initial_value: '0'

  - id: active_meaters      # bits set/reset for every active/inactive Meater probe
    type: int
    initial_value: '0'

  - id: zone1_value         # the value used for Zone temperature labels and arcs
    type: int
    initial_value: ${Invalid_Sensor_Value}
  - id: zone2_value
    type: int
    initial_value: ${Invalid_Sensor_Value}
  - id: zone3_value
    type: int
    initial_value: ${Invalid_Sensor_Value}
  - id: zone4_value
    type: int
    initial_value: ${Invalid_Sensor_Value}

  - id: sensor1_value       # the value used for Sensor temperature labels and arcs
    type: int
    initial_value: ${Invalid_Sensor_Value}
  - id: sensor2_value
    type: int
    initial_value: ${Invalid_Sensor_Value}
  - id: sensor3_value
    type: int
    initial_value: ${Invalid_Sensor_Value}
  - id: sensor4_value
    type: int
    initial_value: ${Invalid_Sensor_Value}

  - id: zone1_limit_value   # the value used for Zone limit labels and arcs
    type: int
    initial_value: '0'
  - id: zone2_limit_value
    type: int
    initial_value: '0'
  - id: zone3_limit_value
    type: int
    initial_value: '0'
  - id: zone4_limit_value
    type: int
    initial_value: '0'

  - id: sensor1_limit_value # the value used for Sensor limit labels and arcs
    type: int
    initial_value: '0'
  - id: sensor2_limit_value
    type: int
    initial_value: '0'
  - id: sensor3_limit_value
    type: int
    initial_value: '0'
  - id: sensor4_limit_value
    type: int
    initial_value: '0'

  - id: battery_soc_value
    type: int
    initial_value: '0'

  - id: page_index          # parameter for page
    type: int
    initial_value: '0'
  - id: sensor_index        # parameter for Zone (1-4) or Sensor (5-8)
    type: int
    initial_value: '0'
  - id: sensor_limit_value  # the actual sensor limit for the indexed Zone/Sensor
    type: int
    initial_value: '0'
  - id: sensor_max_value    # maximum value for Zone and Sensor values (arcs)
    type: int
    initial_value: '0'

  - id: timer_h             # timer hours
    type: int
    initial_value: '0'
  - id: timer_m             # timer minutes
    type: int
    initial_value: '0'
  - id: timer_s             # timer seconds
    type: int
    initial_value: '0'
  - id: timer_active        # timer active (=running)
    type: bool
    initial_value: 'false'
  - id: timer_alarm         # timer alarm active
    type: bool
    initial_value: 'false'

  - id: helper_h             # timer hours
    type: int
    initial_value: '0'
  - id: helper_m             # timer minutes
    type: int
    initial_value: '0'
  - id: helper_s             # timer seconds
    type: int
    initial_value: '0'

  - id: last_sensor_lower_digits  # set limits page
    type: int
    initial_value: '0'

  # settings: persisted and temporary values
  # stick ton the _persistent value for usage.
  # the temporary value is intended for the
  # settings page only.
  - id: settings_g32_mac_address_persistent
    type: std::string
    initial_value: '"${g32_mac_address}"' 
    restore_value: true
    max_restore_data_length: 17
  - id: settings_g32_mac_address
    type: std::string
    initial_value: ""

  - id: settings_meater_mac_addresses_persistent
    type: std::string
    initial_value: '"${meater_mac_address},${meater_mac_address},${meater_mac_address},${meater_mac_address}"'
    restore_value: true
    max_restore_data_length: 68
  - id: settings_meater_mac_addresses
    type: std::array<std::string, 4>
    initial_value: '{"00:00:00:00:00:00","00:00:00:00:00:00","00:00:00:00:00:00","00:00:00:00:00:00"}'

  - id: settings_min_gas_value_persistent
    type: int
    initial_value: ${Min_Gas}
    restore_value: true
  - id: settings_min_gas_value
    type: int
    initial_value: '0'
  - id: settings_min_soc_value_persistent
    type: int
    initial_value: ${Min_SOC}
    restore_value: true
  - id: settings_min_soc_value
    type: int
    initial_value: '0'
  - id: settings_hide_soc_persistent
    type: bool
    initial_value: ${Hide_Battery_Symbol}
    restore_value: true
  - id: settings_hide_soc
    type: bool
    initial_value: 'false'
  - id: settings_enable_temperature_limits_persistent
    type: bool
    initial_value: ${Enable_Temperature_Limits}
    restore_value: true
  - id: settings_enable_temperature_limits
    type: bool
    initial_value: 'true'
  - id: settings_hide_inactive_sensors_persistent
    type: bool
    initial_value: ${Hide_Inactive_Sensors}
    restore_value: true
  - id: settings_hide_inactive_sensors
    type: bool
    initial_value: 'false'
  - id: settings_show_time_persistent
    type: bool
    initial_value: ${Show_Time}
    restore_value: true
  - id: settings_show_time
    type: bool
    initial_value: 'true'
  - id: settings_hide_timer_persistent
    type: bool
    initial_value: ${Disable_Timer}
    restore_value: true
  - id: settings_hide_timer
    type: bool
    initial_value: 'false'
  - id: settings_display_timeout_value_persistent
    type: int
    initial_value: ${Display_Timeout}
    restore_value: true
  - id: settings_display_timeout_value
    type: int
    initial_value: '0'


#-------------------------------------------
# Homeassistant or SNTP Time platform
#-------------------------------------------
time:
  platform: sntp
  id: ha_time
  servers:
    - ntp0.ntp-servers.net
    - ntp1.ntp-servers.net
    - ntp2.ntp-servers.net

  # alternatively
  # platform: homeassistant
  # id: ha_time

  timezone: Europe/Berlin
  on_time_sync:
    - script.execute: time_update
  on_time:
    - seconds: '*'
      then:
        - script.execute: time_update

#-------------------------------------------
# LVGL library for displays
#-------------------------------------------
lvgl:
  draw_rounding: 8 # necessary for the axs15231 display controller
  displays: my_display
  touchscreens: my_touch
  bg_color: 0
  border_width: 0
  outline_width: 0
  theme:
    label:
      text_color: 0xFFFFFF
      bg_color: 0
      bg_opa: COVER
      width: 120
      text_align: center
    bar:
      radius: 5
      indicator:
        radius: 5
        arc_color: red
    arc:
      radius: 5
      arc_color: 0x333333
      indicator:
        radius: 5
  style_definitions:
    - id: arc_style
      x: 10
      y: 0
      width: 100
      height: 120
      arc_opa: 60%

      # style for zone and sensor objects with arcs
    - id: temp_obj_style
      width: 120
      height: 120
      bg_color: 0
      text_color: 0xffffff
      pad_all: 0
      radius: 0
      outline_width: 0
      outline_color: 0
      border_width: 0
      border_color: 0
      border_side: NONE
      outline_pad: 0

      # style for zone objects with numbers
    - id: zone_obj_style
      width: 104
      height: 104
      bg_color: 0x333333
      pad_all: 0
      outline_width: 0
      outline_color: 0
      border_width: 0
      border_color: 0
      border_side: NONE
      outline_pad: 0
      radius: 10

      # style for sensor objects with numbers
    - id: sensor_obj_style
      width: 104
      height: 104
      bg_color: 0x333333
      pad_all: 0
      outline_width: 2
      outline_color: 0xaaaaaa
      border_width: 0
      border_color: 0
      border_side: NONE
      outline_pad: 0
      radius: 52

      # style for gas
    - id: gas_obj_style
      width: 480
      height: 22
      bg_color: 0
      text_color: 0xffffff
      pad_all: 0
      radius: 0
      outline_width: 0
      outline_color: 0
      border_width: 0
      border_color: 0
      border_side: NONE
      outline_pad: 0

    - id: main_font_style
      text_font: MONTSERRAT_18
    - id: big_font_style
      text_font: MONTSERRAT_26
    - id: zone_arc_style
      width: 100
      height: 120
    - id: sensor_arc_style
      width: 100
      height: 120

  # send display to idle state after timeout
  on_idle:
    timeout: !lambda "return(id(settings_display_timeout_value_persistent) * 1000);"
    then:
    - if:
        condition:
          - lambda: "return id(settings_display_timeout_value_persistent) > 0;"
        then:
          - logger.log: "Display is idle"
          - light.turn_off: backlight
          - lvgl.pause:

  # boot screen with spinner until first data received
  top_layer:
    widgets:
      - obj:
          id: boot_screen
          x: 0
          y: 0
          width: 480
          height: 320
          bg_color: 0
          bg_opa: COVER
          radius: 0
          pad_all: 0
          border_width: 0
          widgets:
            - spinner:
                align: CENTER
                spin_time: 1s
                arc_length: 60deg
                arc_width: 6
                arc_color: 0
                indicator:
                  arc_color: 0x00ff00
                  arc_width: 6
      - obj:
          id: status_bar_top
          x: 0
          y: 0
          width: 480
          height: 22
          bg_color: 0
          bg_opa: COVER
          pad_all: 0
          border_width: 0
          hidden: "true"
          radius: 0
          widgets:            
            - label: # symbol for enetering settings
                x: 12
                y: 0
                text_font: MONTSERRAT_18
                text_color: 0xffffff
                text_align: LEFT
                width: 180
                text: "G32 Connected"

                clickable: true
                on_press:
                  - if:
                      condition:
                        or:
                          - lambda: 'return lv_scr_act() == id(arcs_page)->obj;'
                          - lambda: 'return lv_scr_act() == id(numbers_page)->obj;'
                      then:
                        - lambda: |-
                            id(page_index) = (lv_scr_act() == id(arcs_page)->obj ? 1 : 2);
                        - lvgl.page.show: settings_page

            - obj: # symbol for batter low warning
                id: battery_symbol_obj
                x: 420
                y: 0
                width: 60
                height: 22
                bg_color: 0
                pad_all: 0
                outline_width: 0
                border_width: 0
                border_side: NONE
                radius: 0
                hidden: !lambda |-
                  return id(settings_hide_soc_persistent);
                widgets:
                  # symbol for battery low warning
                  - line:
                      id: battery_symbol
                      points:
                        - 12, 2
                        - 18, 2
                        - 17, 2
                        - 17, 4
                        - 17, 3
                        - 20, 3
                        - 19, 3
                        - 19, 20
                        - 19, 19
                        - 10, 19
                        - 11, 19
                        - 11, 2
                        - 11, 3
                        - 14, 3
                      line_width: 2
                      line_rounded: false
                      line_color: !lambda |-
                        if( id(battery_soc_value) <= id(settings_min_soc_value_persistent) ) { return lv_color_hex(0xff0000); } else { return lv_color_hex(0x00ff00); }
                  - bar:
                      id: battery_bar
                      x: 12
                      y: 3
                      height: 15
                      width: 6
                      radius: 0
                      min_value: 0
                      max_value: 100
                      bg_color: 0
                      # for some unknown reason this code does not work!
                      indicator:
                        bg_color:  !lambda |-
                          if( id(battery_soc_value) <= id(settings_min_soc_value_persistent) ) {
                            return lv_color_hex(0xff0000); // red
                            } else {
                            return lv_color_hex(0x00ff00); // green
                          }
                        radius: 0
                      # end of not working code!
                      value: !lambda return id(battery_soc_value);
                  - label:
                      id: battery_soc_label
                      x: 25
                      y: 3
                      text_font: MONTSERRAT_14
                      text_align: CENTER
                      width: 35
                      text_color: !lambda |-
                        if( id(battery_soc_value) <= id(settings_min_soc_value_persistent) ) {
                          return lv_color_hex(0xff0000); // red
                          } else {
                          return lv_color_hex(0x00ff00); // green
                        }
                      text: !lambda |-
                        return (to_string(static_cast<int>(id(battery_soc_value)))+"%").c_str();
            - label: # symbol for successfull BT connection
                id: g32bt_connect_label
                x: 396
                y: 0
                text_font: MONTSERRAT_18
                text_color: 0x00ff00
                text_align: CENTER
                width: 30
                text: "\uF293" # BT symbol
                hidden: true
            - label: # symbol for successfull WIFI connection
                id: wifi_connect_label
                x: 367
                y: 0
                text_font: MONTSERRAT_18
                text_color: 0x00ff00
                text_align: CENTER
                width: 30
                text: "\uF1EB" # WIFI symbol
                hidden: true
            - label: # symbol for 'light on'
                id: light_on_label
                x: 337
                y: 0
                text_font: MONTSERRAT_18
                text_color: 0xffff00
                text_align: CENTER
                width: 30
                text: "\uF0E7" # lightning
                hidden: true
            - label: # symbol for 'firebox open'
                id: firebox_open_label
                x: 307
                y: 0
                text_font: MONTSERRAT_18
                text_color: 0x00ff00
                text_align: CENTER
                width: 30
                text: "\uF093" # arrow up
                hidden: true
            - label: # symbol for gas low warning
                id: g32_warning_label
                x: 277
                y: 0
                text_font: MONTSERRAT_18
                text_color: 0xff0000
                text_align: CENTER
                width: 30
                text: "\uF071" # invertiertes Ausrufungszeichen
                hidden: true
            - label: # time hours:minutes:seconds
                id: display_time
                x: 194
                y: 0
                text_font: MONTSERRAT_20
                text_color: 0xffffff
                text_align: LEFT # wenige Bewegung
                bg_color: 0
                width: 88
                text: "00:00:00"
                hidden: !lambda |-
                  return (!id(settings_show_time_persistent) && id(settings_hide_timer_persistent));
                clickable: true
                on_press:
                  - if:
                      condition:
                        lambda: 'return !id(settings_hide_timer_persistent);'
                      then:
                        - if:
                            condition:
                              or:
                                - lambda: 'return lv_scr_act() == id(arcs_page)->obj;'
                                - lambda: 'return lv_scr_act() == id(numbers_page)->obj;'
                            then:
                              - lambda: |-
                                  id(page_index) = (lv_scr_act() == id(arcs_page)->obj ? 1 : 2);
                              - lvgl.page.show: timer_page
            - label:
                id: timer_value
                x: 194
                y: 0
                width: 88
                bg_opa: COVER
                text_font: MONTSERRAT_20
                text_align: LEFT # wenige Bewegung
                text: "00:00:00"
                hidden: true
                clickable: 'true'
                on_press:
                  - if:
                      condition:
                        or:
                          - lambda: 'return lv_scr_act() == id(arcs_page)->obj;'
                          - lambda: 'return lv_scr_act() == id(numbers_page)->obj;'
                      then:
                        - lambda: |-
                            id(page_index) = (lv_scr_act() == id(arcs_page)->obj ? 1 : 2);
                        - lvgl.page.show: timer_page                

      - obj:
          id: status_bar_bottom
          x: 0
          y: 298
          width: 480
          height: 22
          bg_color: 0
          bg_opa: COVER
          pad_all: 0
          border_width: 0
          radius: 0
          hidden: "true"
          widgets:
            # gas object with gas values in % and g
            - obj:
                id: gas_obj
                x: 0
                y: 0
                styles: gas_obj_style
                widgets:
                  - label:
                      x: 24
                      y: 0
                      text_font: MONTSERRAT_18
                      text_align: LEFT
                      text: 'Gas:'
                  - label:
                      id: gas_percent_label
                      x: 260
                      y: 0
                      text_font: MONTSERRAT_18
                      text: '-- %'
                  - label:
                      id: gas_weight_label
                      x: 358
                      y: 0
                      text_font: MONTSERRAT_18
                      text: '--- g'
                  - bar:
                      id: gas_percent_bar
                      x: 80
                      y: 5
                      height: 12
                      width: 200
                      radius: 5
                      min_value: 1
                      max_value: 100
                      bg_color: 0xffffff
                      indicator:
                        bg_color: ${Gas_Bar_Color}
                      value: 0

      - obj:
          id: settings_status_bar_top
          x: 0
          y: 0
          width: 480
          height: 22
          bg_color: 0
          bg_opa: COVER
          pad_all: 0
          border_width: 0
          hidden: "true"
          radius: 0
          widgets:            
            - label:
                x: 0
                y: 0
                text_font: MONTSERRAT_18
                text_color: 0xffffff
                text_align: CENTER
                width: 480
                text: "Einstellungen"
                clickable: true
                on_press:
                  - script.execute: apply_mac_address
                  - script.execute: show_temperatures_page

            - label: # version
                x: 360
                y: 4
                width: 120
                text_font: MONTSERRAT_14
                text_align: RIGHT
                text_color: 0x555555
                text: ${version}

      - keyboard:
          id: my_keyboard
          align: BOTTOM_MID
          hidden: true
          on_ready:
            - lvgl.widget.hide: my_keyboard
  # pages
  pages:
    # main page with arcs
    - id: arcs_page
      bg_color: 0
      bg_opa: COVER
      pad_all: 0
      on_swipe_left:
        then:
          if:
            condition:
              lambda: 'return id(show_numbers_page) == true;'
            then:
              - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 600ms
      on_swipe_right:
        then:
          if:
            condition:
              lambda: 'return id(show_numbers_page) == true;'
            then:
              - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
              - lvgl.page.next:
                  animation: OUT_RIGHT
                  time: 600ms
      widgets:
        # zone 1 object with Headline, Labels and Arc
        - obj:
            id: zone1_obj
            x: 0
            y: 52
            styles: temp_obj_style
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: zone1_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text_color: !lambda |-
                    if( (id(zone1_limit_value) == 0) || (id(zone1_value) < id(zone1_limit_value)) ) {
                      return lv_color_hex(0xffffff);
                      } else {
                      return lv_color_hex(0xff0000);
                    }
                  text: !lambda |-
                    if( id(zone1_value) < 1500) {return (to_string(static_cast<int>(id(zone1_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 1;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone1_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone1_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}1 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone1_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: zone1_limit_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(zone1_limit_value);
              - arc:
                  id: zone1_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(zone1_value) < 1500) {return id(zone1_value);
                    } else {
                      return 0;
                    }

        # zone 2 object with Headline, Labels and Arc
        - obj:
            id: zone2_obj
            x: 120
            y: 52
            styles: temp_obj_style
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: zone2_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text_color: !lambda |-
                    if( (id(zone2_limit_value) == 0) || (id(zone2_value) < id(zone2_limit_value)) ) {
                      return lv_color_hex(0xffffff);
                      } else {
                      return lv_color_hex(0xff0000);
                    }
                  text: !lambda |-
                    if( id(zone2_value) < 1500) {return (to_string(static_cast<int>(id(zone2_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 2;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone2_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone2_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}2 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone2_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: zone2_limit_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(zone2_limit_value);
              - arc:
                  id: zone2_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(zone2_value) < 1500) {return id(zone2_value);
                    } else {
                      return 0;
                    }

        # zone 3 object with Headline, Labels and Arc
        - obj:
            id: zone3_obj
            x: 240
            y: 52
            styles: temp_obj_style
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: zone3_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text_color: !lambda |-
                    if( (id(zone3_limit_value) == 0) || (id(zone3_value) < id(zone3_limit_value)) ) {
                      return lv_color_hex(0xffffff);
                      } else {
                      return lv_color_hex(0xff0000);
                    }
                  text: !lambda |-
                    if( id(zone3_value) < 1500) {return (to_string(static_cast<int>(id(zone3_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 3;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone3_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone3_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}3 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone3_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: zone3_limit_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(zone3_limit_value);
              - arc:
                  id: zone3_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(zone3_value) < 1500) {return id(zone3_value);
                    } else {
                      return 0;
                    }

        # zone 4 object with Headline, Labels and Arc
        - obj:
            id: zone4_obj
            x: 360
            y: 52
            styles: temp_obj_style
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: zone4_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text_color: !lambda |-
                    if( (id(zone4_limit_value) == 0) || (id(zone4_value) < id(zone4_limit_value)) ) {
                      return lv_color_hex(0xffffff);
                      } else {
                      return lv_color_hex(0xff0000);
                    }
                  text: !lambda |-
                    if( id(zone4_value) < 1500) {return (to_string(static_cast<int>(id(zone4_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 4;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone4_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone4_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}4 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone4_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: zone4_limit_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(zone4_limit_value);
              - arc:
                  id: zone4_arc
                  min_value: 1
                  max_value: 500
                  indicator:
                    arc_color: ${Zone_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(zone4_value) < 1500) {return id(zone4_value);
                    } else {
                      return 0;
                    }

        # sensor 1 object with Headline, Labels and Arc
        - obj:
            id: sensor1_obj
            x: 0
            y: 191
            styles: temp_obj_style
            hidden: !lambda |-
              if( (id(sensor1_value) < 1500) || (id(sensor1_limit_value) > 0) || (id(settings_hide_inactive_sensors_persistent) == false) ) {
                id(active_sensors) |= 0x01;
                return false;
              } else {
                id(active_sensors) &= ~0x01;
                return true;
              }
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: sensor1_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text: !lambda |-
                    if( id(sensor1_value) < 1500) {return (to_string(static_cast<int>(id(sensor1_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor1_limit_value) == 0) || (id(sensor1_value) < id(sensor1_limit_value) && id(sensor1_value) < 1500) ) {
                      return lv_color_hex(0xffffff); // White
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 5;
                        id(sensor_max_value) = ${Sensor1_Max};
                        id(sensor_limit_value) = id(sensor1_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor1_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor1_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}1 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor1_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: sensor1_limit_arc
                  min_value: 1
                  max_value: ${Sensor1_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(sensor1_limit_value);
              - arc:
                  id: sensor1_arc
                  min_value: 1
                  max_value: ${Sensor1_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(sensor1_value) < 1500) {return (id(sensor1_value));
                    } else {
                      return (0);
                    }

        # sensor 2 object with Headline, Labels and Arc
        - obj:
            id: sensor2_obj
            x: 120
            y: 191
            styles: temp_obj_style
            hidden: !lambda |-
              if( (id(sensor2_value) < 1500) || (id(sensor2_limit_value) > 0) || (id(settings_hide_inactive_sensors_persistent) == false) ) {
                id(active_sensors) |= 0x02;
                return false;
              } else {
                id(active_sensors) &= ~0x02;
                return true;
              }
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: sensor2_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text: !lambda |-
                    if( id(sensor2_value) < 1500) {return (to_string(static_cast<int>(id(sensor2_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor2_limit_value) == 0) || (id(sensor2_value) < id(sensor2_limit_value) && id(sensor2_value) < 1500) ) {
                      return lv_color_hex(0xffffff); // White
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 6;
                        id(sensor_max_value) = ${Sensor2_Max};
                        id(sensor_limit_value) = id(sensor2_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor2_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor2_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}2 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor2_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: sensor2_limit_arc
                  min_value: 1
                  max_value: ${Sensor2_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(sensor2_limit_value);
              - arc:
                  id: sensor2_arc
                  min_value: 1
                  max_value: ${Sensor2_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(sensor2_value) < 1500) {return (id(sensor2_value));
                    } else {
                      return (0);
                    }

        # sensor 3 object with Headline, Labels and Arc
        - obj:
            id: sensor3_obj
            x: 240
            y: 191
            styles: temp_obj_style
            hidden: !lambda |-
              if( (id(sensor3_value) < 1500) || (id(sensor3_limit_value) > 0) || (id(settings_hide_inactive_sensors_persistent) == false) ) {
                id(active_sensors) |= 0x04;
                return false;
              } else {
                id(active_sensors) &= ~0x04;
                return true;
              }
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: sensor3_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text: !lambda |-
                    if( id(sensor3_value) < 1500) {return (to_string(static_cast<int>(id(sensor3_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor3_limit_value) == 0) || (id(sensor3_value) < id(sensor3_limit_value) && id(sensor3_value) < 1500) ) {
                      return lv_color_hex(0xffffff); // White
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 7;
                        id(sensor_max_value) = ${Sensor3_Max};
                        id(sensor_limit_value) = id(sensor3_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor3_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor3_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}3 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor3_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: sensor3_limit_arc
                  min_value: 1
                  max_value: ${Sensor3_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(sensor3_limit_value);
              - arc:
                  id: sensor3_arc
                  min_value: 1
                  max_value: ${Sensor3_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(sensor3_value) < 1500) {return (id(sensor3_value));
                    } else {
                      return (0);
                    }

        # sensor 4 object with Headline, Labels and Arc
        - obj:
            id: sensor4_obj
            x: 360
            y: 191
            styles: temp_obj_style
            hidden: !lambda |-
              if( (id(sensor4_value) < 1500) || (id(sensor4_limit_value) > 0) || (id(settings_hide_inactive_sensors_persistent) == false) ) {
                id(active_sensors) |= 0x08;
                return false;
              } else {
                id(active_sensors) &= ~0x08;
                return true;
              }
            widgets:
              - label:
                  x: 0
                  y: 74
                  text_font: MONTSERRAT_18
                  text: '°C'
              - label:
                  id: sensor4_label
                  x: 0
                  y: 34
                  text_font: MONTSERRAT_26
                  text: !lambda |-
                    if( id(sensor4_value) < 1500) {return (to_string(static_cast<int>(id(sensor4_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor4_limit_value) == 0) || (id(sensor4_value) < id(sensor4_limit_value) && id(sensor4_value) < 1500) ) {
                      return lv_color_hex(0xffffff); // White
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_press:
                    - lambda: |-
                        id(page_index) = 1;
                        id(sensor_index) = 8;
                        id(sensor_max_value) = ${Sensor4_Max};
                        id(sensor_limit_value) = id(sensor4_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor4_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor4_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}4 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor4_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - arc:
                  id: sensor4_limit_arc
                  min_value: 1
                  max_value: ${Sensor4_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda return id(sensor4_limit_value);
              - arc:
                  id: sensor4_arc
                  min_value: 1
                  max_value: ${Sensor4_Max}
                  indicator:
                    arc_color: ${Sensor_Arc_Color}
                  styles: arc_style
                  value: !lambda |-
                    if( id(sensor4_value) < 1500) {return (id(sensor4_value));
                    } else {
                      return (0);
                    }

        # common headlines zones and sensors
        - label:
            x: 12
            y: 23
            bg_opa: COVER
            text_font: MONTSERRAT_16
            text_align: left
            text: "Zonen"
        - label:
            id: sensors_headline
            x: 12
            y: 160
            bg_opa: COVER
            width: 460
            text_font: MONTSERRAT_16
            text_align: left
            text: "Temperatursensoren"
            hidden: !lambda return (id(active_sensors) == 0);

    # main page with numbers
    - id: numbers_page
      pad_all: 0
      bg_opa: COVER
      on_swipe_left:
        then:
          if:
            condition:
              lambda: 'return id(show_arcs_page) == true;'
            then:
              - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
              - lvgl.page.next:
                  animation: OUT_LEFT
                  time: 600ms
      on_swipe_right:
        then:
          if:
            condition:
              lambda: 'return id(show_arcs_page) == true;'
            then:
              - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
              - lvgl.page.next:
                  animation: OUT_RIGHT
                  time: 600ms
      widgets:
        # zone 1 object with Labels and line
        - obj:
            id: zone1_obj2
            x: 6
            y: 47
            styles: zone_obj_style
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  bg_color: 0x333333
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: zone1_label2
                  x: 5
                  y: 8
                  width: 90
                  bg_color: 0x333333
                  text_font: MONTSERRAT_34
                  text_color: !lambda |-
                    if( (id(zone1_limit_value) == 0) || (id(zone1_value) < id(zone1_limit_value)) ) {
                    return lv_color_hex(${Limit_text_Color}); // user-defined color
                      } else {
                      return lv_color_hex(0xff0000); // red
                    }
                  text: !lambda |-
                    if( id(zone1_value) < 1500) {return (to_string(static_cast<int>(id(zone1_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 1;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone1_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone1_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}1 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone1_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: zone1_limit_label2
                  x: 5
                  y: 64
                  width: 90
                  bg_color: 0x333333
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(zone1_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(zone1_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # zone 2 object with Labels and line
        - obj:
            id: zone2_obj2
            x: 126
            y: 47
            styles: zone_obj_style
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  bg_color: 0x333333
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: zone2_label2
                  x: 5
                  y: 8
                  width: 90
                  bg_color: 0x333333
                  text_font: MONTSERRAT_34
                  text_color: !lambda |-
                    if( (id(zone2_limit_value) == 0) || (id(zone2_value) < id(zone2_limit_value)) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                      } else {
                      return lv_color_hex(0xff0000); // red
                    }
                  text: !lambda |-
                    if( id(zone2_value) < 1500) {return (to_string(static_cast<int>(id(zone2_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 2;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone2_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone2_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}2 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone2_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: zone2_limit_label2
                  x: 5
                  y: 64
                  width: 90
                  bg_color: 0x333333
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(zone2_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(zone2_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # zone 3 object with Labels and line
        - obj:
            id: zone3_obj2
            x: 246
            y: 47
            styles: zone_obj_style
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  bg_color: 0x333333
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: zone3_label2
                  x: 5
                  y: 8
                  width: 90
                  bg_color: 0x333333
                  text_font: MONTSERRAT_34
                  text_color: !lambda |-
                    if( (id(zone3_limit_value) == 0) || (id(zone3_value) < id(zone3_limit_value)) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                      } else {
                      return lv_color_hex(0xff0000); // red
                    }
                  text: !lambda |-
                    if( id(zone3_value) < 1500) {return (to_string(static_cast<int>(id(zone3_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 3;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone3_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone3_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}3 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone3_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: zone3_limit_label2
                  x: 5
                  y: 64
                  width: 90
                  bg_color: 0x333333
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(zone3_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(zone3_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # zone 4 object with Labels and line
        - obj:
            id: zone4_obj2
            x: 366
            y: 47
            styles: zone_obj_style
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  bg_color: 0x333333
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: zone4_label2
                  x: 5
                  y: 8
                  width: 90
                  bg_color: 0x333333
                  text_font: MONTSERRAT_34
                  text_color: !lambda |-
                    if( (id(zone4_limit_value) == 0) || (id(zone4_value) < id(zone4_limit_value)) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                      } else {
                      return lv_color_hex(0xff0000); // red
                    }
                  text: !lambda |-
                    if( id(zone4_value) < 1500) {return (to_string(static_cast<int>(id(zone4_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 4;
                        id(sensor_max_value) = 500;
                        id(sensor_limit_value) = id(zone4_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, 500);
                        lv_slider_set_value(sensor_limit_slider, id(zone4_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Zone_Text}4 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(zone4_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: zone4_limit_label2
                  x: 5
                  y: 64
                  width: 90
                  bg_color: 0x333333
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(zone4_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(zone4_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # grey rectangle which combines the sensor objects
        - obj:
            id: sensors_obj2
            x: 6
            y: 184
            width: 464
            height: 112
            bg_opa: COVER
            bg_color: 0x333333
            pad_all: 0
            outline_width: 0
            outline_color: 0
            border_width: 0
            border_color: 0
            border_side: NONE
            outline_pad: 0
            radius: 10
            hidden: !lambda return (id(active_sensors) == 0);

        # sensor 1 object with Labels and line
        - obj:
            id: sensor1_obj2
            x: 10
            y: 189
            styles: sensor_obj_style
            hidden: !lambda |-
              if( (id(sensor1_value) < 1500) || (id(sensor1_limit_value) > 0) || (id(settings_hide_inactive_sensors_persistent) == false) ) {
                id(active_sensors) |= 0x01;
                return false;
              } else {
                id(active_sensors) &= ~0x01;
                return true;
              }
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  bg_color: 0x333333
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: sensor1_label2
                  x: 0
                  y: 8
                  width: 100
                  bg_opa: TRANSP
                  text_font: MONTSERRAT_34
                  text: !lambda |-
                    if( (id(sensor1_value) < 1500) && (id(sensor1_value) > 0) ) {
                      return (to_string(static_cast<int>(id(sensor1_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor1_limit_value) == 0) || (id(sensor1_value) < id(sensor1_limit_value) && id(sensor1_value) < 1500) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 5;
                        id(sensor_max_value) = ${Sensor1_Max};
                        id(sensor_limit_value) = id(sensor1_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor1_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor1_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}1 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor1_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: sensor1_limit_label2
                  x: 0
                  y: 64
                  width: 100
                  bg_opa: TRANSP
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(sensor1_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(sensor1_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # sensor 2 object with Labels and line
        - obj:
            id: sensor2_obj2
            x: 127
            y: 189
            styles: sensor_obj_style
            hidden: !lambda |-
              if( (id(sensor2_value) < 1500) || (id(sensor2_limit_value) > 0) || (id(settings_hide_inactive_sensors_persistent) == false) ) {
                id(active_sensors) |= 0x02;
                return false;
              } else {
                id(active_sensors) &= ~0x02;
                return true;
              }
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  bg_color: 0x333333
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: sensor2_label2
                  x: 0
                  y: 8
                  width: 100
                  bg_opa: TRANSP
                  text_font: MONTSERRAT_34
                  text: !lambda |-
                    if( (id(sensor2_value) < 1500) && (id(sensor2_value) > 0) ) {
                      return (to_string(static_cast<int>(id(sensor2_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor2_limit_value) == 0) || (id(sensor2_value) < id(sensor2_limit_value) && id(sensor2_value) < 1500) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 6;
                        id(sensor_max_value) = ${Sensor2_Max};
                        id(sensor_limit_value) = id(sensor2_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor2_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor2_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}2 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor2_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: sensor2_limit_label2
                  x: 0
                  y: 64
                  width: 100
                  bg_opa: TRANSP
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(sensor2_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(sensor2_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # sensor 3 object with Labels and line
        - obj:
            id: sensor3_obj2
            x: 245
            y: 189
            styles: sensor_obj_style
            hidden: !lambda |-
              if( (id(sensor3_value) < 1500) || (id(sensor3_limit_value) > 0) || (id(settings_hide_inactive_sensors_persistent) == false) ) {
                id(active_sensors) |= 0x04;
                return false;
              } else {
                id(active_sensors) &= ~0x04;
                return true;
              }
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  bg_color: 0x333333
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: sensor3_label2
                  x: 0
                  y: 8
                  width: 100
                  bg_opa: TRANSP
                  text_font: MONTSERRAT_34
                  text: !lambda |-
                    if( (id(sensor3_value) < 1500) && (id(sensor3_value) > 0) ) {
                      return (to_string(static_cast<int>(id(sensor3_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor3_limit_value) == 0) || (id(sensor3_value) < id(sensor3_limit_value) && id(sensor3_value) < 1500) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }

                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 7;
                        id(sensor_max_value) = ${Sensor3_Max};
                        id(sensor_limit_value) = id(sensor3_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor3_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor3_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}3 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor3_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: sensor3_limit_label2
                  x: 0
                  y: 64
                  width: 100
                  bg_opa: TRANSP
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(sensor3_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(sensor3_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # sensor 4 object with Labels and line
        - obj:
            id: sensor4_obj2
            x: 362
            y: 189
            styles: sensor_obj_style
            hidden: !lambda |-
              if( (id(sensor4_value) < 1500) || (id(sensor4_limit_value) > 0) || (id(settings_hide_inactive_sensors_persistent) == false) ) {
                id(active_sensors) |= 0x08;
                return false;
              } else {
                id(active_sensors) &= ~0x08;
                return true;
              }
            widgets:
              - line:
                  points:
                    - 8, 52
                    - 74, 52
                  line_width: 3
                  line_color: 0x888888
                  line_rounded: true
              - label:
                  x: 78
                  y: 42
                  width: 24
                  bg_color: 0x333333
                  text_font: MONTSERRAT_18
                  text_color: 0x888888
                  text: '°C'
              - label:
                  id: sensor4_label2
                  x: 0
                  y: 8
                  width: 100
                  bg_opa: TRANSP
                  text_font: MONTSERRAT_34
                  text: !lambda |-
                    if( (id(sensor4_value) < 1500) && (id(sensor4_value) > 0) ) {
                      return (to_string(static_cast<int>(id(sensor4_value)))).c_str();
                    } else {
                      return ("---");
                    }
                  text_color: !lambda |-
                    if( (id(sensor4_limit_value) == 0) || (id(sensor4_value) < id(sensor4_limit_value) && id(sensor4_value) < 1500) ) {
                      return lv_color_hex(${Limit_text_Color}); // user-defined color
                    } else {
                      return lv_color_hex(0xff0000); // Red
                    }
                  clickable: !lambda |-
                    return id(settings_enable_temperature_limits_persistent);
                  on_click:
                    - lambda: |-
                        id(page_index) = 2;
                        id(sensor_index) = 8;
                        id(sensor_max_value) = ${Sensor4_Max};
                        id(sensor_limit_value) = id(sensor4_limit_value);
                        lv_slider_set_range(sensor_limit_slider, 0, ${Sensor4_Max});
                        lv_slider_set_value(sensor_limit_slider, id(sensor4_limit_value), LV_ANIM_OFF );
                    - lvgl.label.update:
                        id: sensor_limit_headline_label
                        text: !lambda |-
                          return "${Sensor_Text}4 Alarm";
                    - lvgl.label.update:
                        id: sensor_limit_label
                        text: !lambda |-
                          return (to_string(static_cast<int>(id(sensor4_limit_value)))+"°C").c_str();
                    - lvgl.widget.redraw:
                        id: sensor_limit_slider
                    - lvgl.page.show: sensor_limits_page
              - label:
                  id: sensor4_limit_label2
                  x: 0
                  y: 64
                  width: 100
                  bg_opa: TRANSP
                  text_font: MONTSERRAT_24
                  text_color: ${Limit_text_Color}
                  text: !lambda |-
                    if( id(sensor4_limit_value) > 0 ){
                      return (to_string(static_cast<int>(id(sensor4_limit_value)))).c_str();
                    } else {
                      return ("---");
                    }

        # common headlines zones and sensors
        - label:
            x: 12
            y: 23
            bg_opa: COVER
            text_font: MONTSERRAT_16
            text_align: left
            text: "Zonen"
        - label:
            id: sensors_headline2
            x: 12
            y: 160
            bg_opa: COVER
            width: 460
            text_font: MONTSERRAT_16
            text_align: left
            text: "Temperatursensoren"
            hidden: !lambda return (id(active_sensors) == 0);
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    - id: timer_page
      skip: true
      pad_all: 0
      widgets:
        - label:
            id: timer_headline_label
            x: 0
            y: 40
            width: 480
            text_font: MONTSERRAT_20
            text_align: CENTER
            text: "Timer"

        - label:
            x: 125
            y: 70
            width: 50
            text_font: MONTSERRAT_20
            text_align: CENTER
            text: "H"
        - label:
            x: 220
            y: 70
            width: 50
            text_font: MONTSERRAT_20
            text_align: CENTER
            text: "M"
        - label:
            x: 315
            y: 70
            width: 50
            text_font: MONTSERRAT_20
            text_align: CENTER
            text: "S"

        - roller:
            id: timer_roller_h
            x: 120
            y: 100
            width: 60
            text_font: MONTSERRAT_20
            options: ['00','01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']
            selected:
              bg_color: 0x555555
            on_value:
              - lambda: |-
                  id(helper_h) = x;

        - label:
            x: 185
            y: 154
            width: 30
            text_font: MONTSERRAT_20
            text_align: CENTER
            text: ":"

        - roller:
            id: timer_roller_m
            x: 215
            y: 100
            width: 60
            text_font: MONTSERRAT_20
            options: ['00','01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
            selected:
              bg_color: 0x555555
            on_value:
              - lambda: |-
                  id(helper_m) = x;
        - label:
            x: 280
            y: 154
            width: 30
            text_font: MONTSERRAT_20
            text_align: CENTER
            text: ":"

        - roller:
            id: timer_roller_s
            x: 310
            y: 100
            width: 60
            text_font: MONTSERRAT_20
            options: ['00','01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59']
            selected:
              bg_color: 0x555555
            on_value:
              - lambda: |-
                  id(helper_s) = x;

        - button:
            x: 12
            y: 60
            width: 70
            height: 200
            bg_color: 0x555555
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "CLR"
                  bg_color: 0x555555
            on_click:
              then:
                - lvgl.roller.update:
                    id: [timer_roller_h, timer_roller_m, timer_roller_s]
                    selected_index: 0
                - lambda: |-
                    id(helper_h) = 0;
                    id(helper_m) = 0;
                    id(helper_s) = 0;
                    id(timer_alarm) = false;
                    id(timer_active) = false;
                - lvgl.label.update:
                    id: timer_value
                    hidden: !lambda |-
                      return (id(settings_hide_timer_persistent) || (!id(timer_active) && !id(timer_alarm)));
        - button:
            x: 398
            y: 60
            width: 70
            height: 200
            bg_color: 0x555555
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "OK"
                  bg_color: 0x555555                  
            on_click:
              - lambda: |-
                  id(timer_h) = id(helper_h);
                  id(timer_m) = id(helper_m);
                  id(timer_s) = id(helper_s);
                  if( id(timer_h) > 0 || id(timer_m) > 0 || id(timer_s) > 0 ){
                    id(timer_active) = true;
                    id(timer_alarm) = false;
                  }
              - script.execute: show_temperatures_page
              - lvgl.label.update:
                  id: timer_value
                  hidden: !lambda |-
                    return (id(settings_hide_timer_persistent) || (!id(timer_active) && !id(timer_alarm)));

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    - id: sensor_limits_page
      # Most of these on_load lambdas of the sensor_limits_page are AI generated to finally
      # make this work. Just some notes to keep in mind in case someone wants to get rid of
      # the AI generated chunks od code:
      # - roller options get dynamically generated to match sensor_max_value (which differs
      #   for zones and sensors)
      # - roller options get also dynamically updated once the selected value get nera the
      #   sensor_max_value so you should not be able to slect values tha exceed the maximum
      #   value that is allowed.
      # - this is synced with the horizontal slider as an alternative way to set the quickly
      #   set the value.
      # - unfortunately the roller component forgets its value when the options are changed,
      #   though it does not seem like it because the visual representation suggests otherwise.
      # - rollers and sliders are restored when the page is loaded, and reset on pressing "CLR"
      # - finally: the sensor_limit_label is included in the UI for debugging but invisible
      #   by default.
      skip: true
      pad_all: 0
      on_load:
        then:
          - lvgl.widget.refresh: sensor_limits_max_value
          - lambda: |-
              // Clamp sensor_limit_value to sensor_max_value if needed
              if (id(sensor_limit_value) > id(sensor_max_value)) {
                id(sensor_limit_value) = id(sensor_max_value);
              }
              int max_val = id(sensor_max_value);
              int max_h = max_val / 100;
              // Set hundreds options (0 to max_h)
              std::string h_opts = "";
              for (int i = 0; i <= max_h; i++) {
                h_opts += std::to_string(i);
                if (i < max_h) h_opts += "\n";
              }
              if (h_opts.empty()) h_opts = "0"; // Fallback for max_val < 100
              lv_roller_set_options(id(sensor_limits_hundreds_roller)->obj, h_opts.c_str(), LV_ROLLER_MODE_NORMAL);
              // Set tens and ones to full 0-9 initially
              std::string d_opts = "0\n1\n2\n3\n4\n5\n6\n7\n8\n9";
              lv_roller_set_options(id(sensor_limits_tens_roller)->obj, d_opts.c_str(), LV_ROLLER_MODE_NORMAL);
              lv_roller_set_options(id(sensor_limits_ones_roller)->obj, d_opts.c_str(), LV_ROLLER_MODE_NORMAL);
              // Set initial selected indices based on current sensor_limit_value
              int cur_val = id(sensor_limit_value);
              lv_roller_set_selected(id(sensor_limits_hundreds_roller)->obj, cur_val / 100, LV_ANIM_OFF);
              int h = lv_roller_get_selected(id(sensor_limits_hundreds_roller)->obj); // get actual after possible clamp
              int intended_t = (cur_val / 10) % 10;
              lv_roller_set_selected(id(sensor_limits_tens_roller)->obj, intended_t, LV_ANIM_OFF);
              int intended_o = cur_val % 10;
              lv_roller_set_selected(id(sensor_limits_ones_roller)->obj, intended_o, LV_ANIM_OFF);
              // Trigger hundreds on_value to apply any initial constraints to tens/ones
              int max_t = 9;
              if (h == max_val / 100) {
                max_t = (max_val % 100) / 10;
              }
              std::string t_opts = "";
              for (int i = 0; i <= max_t; i++) {
                t_opts += std::to_string(i);
                if (i < max_t) t_opts += "\n";
              }
              if (t_opts.empty()) t_opts = "0";
              const char* current_t = lv_roller_get_options(id(sensor_limits_tens_roller)->obj);
              if (t_opts != std::string(current_t)) {
                lv_roller_set_options(id(sensor_limits_tens_roller)->obj, t_opts.c_str(), LV_ROLLER_MODE_NORMAL);
                // Set back to intended after possible reset
                int clamped_t = std::min(intended_t, max_t);
                lv_roller_set_selected(id(sensor_limits_tens_roller)->obj, clamped_t, LV_ANIM_OFF);
              }
              int cur_t = lv_roller_get_selected(id(sensor_limits_tens_roller)->obj);
              int max_o = 9;
              if (h == max_val / 100 && cur_t == (max_val % 100) / 10) {
                max_o = max_val % 10;
              }
              std::string o_opts = "";
              for (int i = 0; i <= max_o; i++) {
                o_opts += std::to_string(i);
                if (i < max_o) o_opts += "\n";
              }
              if (o_opts.empty()) o_opts = "0";
              const char* current_o = lv_roller_get_options(id(sensor_limits_ones_roller)->obj);
              if (o_opts != std::string(current_o)) {
                lv_roller_set_options(id(sensor_limits_ones_roller)->obj, o_opts.c_str(), LV_ROLLER_MODE_NORMAL);
                // Set back to intended after possible reset
                int clamped_o = std::min(intended_o, max_o);
                lv_roller_set_selected(id(sensor_limits_ones_roller)->obj, clamped_o, LV_ANIM_OFF);
              }
              int cur_o = lv_roller_get_selected(id(sensor_limits_ones_roller)->obj);
              // Update value/slider if clamped
              if (cur_t != intended_t || cur_o != intended_o) {
                cur_val = h * 100 + cur_t * 10 + cur_o;
                id(sensor_limit_value) = cur_val;
              }
              lv_slider_set_value(sensor_limit_slider, id(sensor_limit_value), LV_ANIM_OFF);
              lv_label_set_text(sensor_limit_label, (std::to_string(id(sensor_limit_value)) + "°C").c_str());
              id(last_sensor_lower_digits) = id(sensor_limit_value) % 100;
      widgets:
        - label:
            id: sensor_limit_headline_label
            x: 0
            y: 40
            width: 480
            text_font: MONTSERRAT_20
            text_align: CENTER
            text: "Sensor x Alarm"
        - label:
            x: 22
            y: 110
            width: 40
            text_font: MONTSERRAT_16
            text_align: CENTER
            text: "0"
        - label:
            id: sensor_limits_max_value
            x: 418
            y: 110
            width: 40
            text_font: MONTSERRAT_16
            text_align: CENTER
            text: !lambda |-
              return to_string(static_cast<int>(id(sensor_max_value)));
        - slider:
            id: sensor_limit_slider
            x: 42
            y: 80
            height: 20
            width: 396
            radius: 5
            min_value: 0
            max_value: 500
            bg_color: 0xffffff
            indicator:
              bg_color: 0xff0000
            knob:
              bg_color: 0xff0000
            value: !lambda return id(sensor_limit_value);
            adv_hittest: true
            on_value:
              - lambda: id(sensor_limit_value) = x;
              - lvgl.label.update:
                  id: sensor_limit_label
                  text: !lambda |-
                    return (to_string(static_cast<int>(id(sensor_limit_value))) + "°C").c_str();
              - lambda: |-
                  int val = id(sensor_limit_value);
                  lv_roller_set_selected(id(sensor_limits_hundreds_roller)->obj, val / 100, LV_ANIM_OFF);
                  lv_roller_set_selected(id(sensor_limits_tens_roller)->obj, (val / 10) % 10, LV_ANIM_OFF);
                  lv_roller_set_selected(id(sensor_limits_ones_roller)->obj, val % 10, LV_ANIM_OFF);
              - lambda: |-
                  int val = id(sensor_limit_value);
                  int h = val / 100;
                  int max_val = id(sensor_max_value);
                  int max_t = 9;
                  if (h == max_val / 100) {
                    max_t = (max_val % 100) / 10;
                  }
                  int intended_t = (val / 10) % 10;
                  std::string t_opts = "";
                  for (int i = 0; i <= max_t; i++) {
                    t_opts += std::to_string(i);
                    if (i < max_t) t_opts += "\n";
                  }
                  if (t_opts.empty()) t_opts = "0";
                  const char* current_t = lv_roller_get_options(id(sensor_limits_tens_roller)->obj);
                  if (t_opts != std::string(current_t)) {
                    lv_roller_set_options(id(sensor_limits_tens_roller)->obj, t_opts.c_str(), LV_ROLLER_MODE_NORMAL);
                    int clamped_t = std::min(intended_t, max_t);
                    lv_roller_set_selected(id(sensor_limits_tens_roller)->obj, clamped_t, LV_ANIM_OFF);
                  }
                  int cur_t = lv_roller_get_selected(id(sensor_limits_tens_roller)->obj);
                  int max_o = 9;
                  if (h == max_val / 100 && cur_t == (max_val % 100) / 10) {
                    max_o = max_val % 10;
                  }
                  int intended_o = val % 10;
                  std::string o_opts = "";
                  for (int i = 0; i <= max_o; i++) {
                    o_opts += std::to_string(i);
                    if (i < max_o) o_opts += "\n";
                  }
                  if (o_opts.empty()) o_opts = "0";
                  const char* current_o = lv_roller_get_options(id(sensor_limits_ones_roller)->obj);
                  if (o_opts != std::string(current_o)) {
                    lv_roller_set_options(id(sensor_limits_ones_roller)->obj, o_opts.c_str(), LV_ROLLER_MODE_NORMAL);
                    int clamped_o = std::min(intended_o, max_o);
                    lv_roller_set_selected(id(sensor_limits_ones_roller)->obj, clamped_o, LV_ANIM_OFF);
                  }
                  int cur_o = lv_roller_get_selected(id(sensor_limits_ones_roller)->obj);
                  // Update value/slider if clamped
                  if (cur_t != intended_t || cur_o != intended_o) {
                    val = h * 100 + cur_t * 10 + cur_o;
                    id(sensor_limit_value) = val;
                    lv_slider_set_value(sensor_limit_slider, val, LV_ANIM_OFF);
                    lv_label_set_text(sensor_limit_label, (std::to_string(val) + "°C").c_str());
                  }
              - lambda: id(last_sensor_lower_digits) = id(sensor_limit_value) % 100;

        - roller:
            id: sensor_limits_hundreds_roller
            x: 145
            y: 130
            width: 60
            text_font: MONTSERRAT_20
            options: [] # dynamically set
            selected:
              bg_color: 0x555555
            on_value:
              - lambda: |-
                  int new_h = x;
                  int max_val = id(sensor_max_value);
                  int lower = id(last_sensor_lower_digits);
                  int intended = new_h * 100 + lower;
                  bool clamped = false;
                  if (intended > max_val) {
                    intended = max_val;
                    clamped = true;
                  }
                  id(sensor_limit_value) = intended;
                  int max_t = 9;
                  if (new_h == max_val / 100) {
                    max_t = (max_val % 100) / 10;
                  }
                  std::string t_opts = "";
                  for (int i = 0; i <= max_t; i++) {
                    t_opts += std::to_string(i);
                    if (i < max_t) t_opts += "\n";
                  }
                  if (t_opts.empty()) t_opts = "0";
                  const char* current_t_opts = lv_roller_get_options(id(sensor_limits_tens_roller)->obj);
                  if (t_opts != std::string(current_t_opts)) {
                    lv_roller_set_options(id(sensor_limits_tens_roller)->obj, t_opts.c_str(), LV_ROLLER_MODE_NORMAL);
                  }
                  int new_t = (intended / 10) % 10;
                  lv_roller_set_selected(id(sensor_limits_tens_roller)->obj, new_t, LV_ANIM_OFF);
                  int cur_t = new_t;
                  int max_o = 9;
                  if (new_h == max_val / 100 && cur_t == (max_val % 100) / 10) {
                    max_o = max_val % 10;
                  }
                  std::string o_opts = "";
                  for (int i = 0; i <= max_o; i++) {
                    o_opts += std::to_string(i);
                    if (i < max_o) o_opts += "\n";
                  }
                  if (o_opts.empty()) o_opts = "0";
                  const char* current_o_opts = lv_roller_get_options(id(sensor_limits_ones_roller)->obj);
                  if (o_opts != std::string(current_o_opts)) {
                    lv_roller_set_options(id(sensor_limits_ones_roller)->obj, o_opts.c_str(), LV_ROLLER_MODE_NORMAL);
                  }
                  int new_o = intended % 10;
                  lv_roller_set_selected(id(sensor_limits_ones_roller)->obj, new_o, LV_ANIM_OFF);
                  lv_slider_set_value(sensor_limit_slider, intended, LV_ANIM_OFF);
                  lv_label_set_text(sensor_limit_label, (std::to_string(intended) + "°C").c_str());
                  if (!clamped) {
                    id(last_sensor_lower_digits) = intended % 100;
                  }
        - roller:
            id: sensor_limits_tens_roller
            x: 210
            y: 130
            width: 60
            text_font: MONTSERRAT_20
            options: [] # dynamically set
            selected:
              bg_color: 0x555555
            on_value:
              - lambda: |-
                  int t = x;
                  int h = lv_roller_get_selected(id(sensor_limits_hundreds_roller)->obj);
                  int max_val = id(sensor_max_value);
                  int max_o = 9;
                  if (h == max_val / 100 && t == (max_val % 100) / 10) {
                    max_o = max_val % 10;
                  }
                  int prev_o = lv_roller_get_selected(id(sensor_limits_ones_roller)->obj);
                  std::string o_opts = "";
                  for (int i = 0; i <= max_o; i++) {
                    o_opts += std::to_string(i);
                    if (i < max_o) o_opts += "\n";
                  }
                  if (o_opts.empty()) o_opts = "0";
                  const char* current_o_opts = lv_roller_get_options(id(sensor_limits_ones_roller)->obj);
                  if (o_opts != std::string(current_o_opts)) {
                    lv_roller_set_options(id(sensor_limits_ones_roller)->obj, o_opts.c_str(), LV_ROLLER_MODE_NORMAL);
                  }
                  int clamped_o = std::min(prev_o, max_o);
                  lv_roller_set_selected(id(sensor_limits_ones_roller)->obj, clamped_o, LV_ANIM_OFF);
                  int cur_o = clamped_o;
                  int val = h * 100 + t * 10 + cur_o;
                  id(sensor_limit_value) = val;
                  lv_slider_set_value(sensor_limit_slider, val, LV_ANIM_OFF);
                  lv_label_set_text(sensor_limit_label, (std::to_string(val) + "°C").c_str());
                  id(last_sensor_lower_digits) = val % 100;
        - roller:
            id: sensor_limits_ones_roller
            x: 275
            y: 130
            width: 60
            text_font: MONTSERRAT_20
            options: [] # dynamically set
            selected:
              bg_color: 0x555555
            on_value:
              - lambda: |-
                  int o = x;
                  int h = lv_roller_get_selected(id(sensor_limits_hundreds_roller)->obj);
                  int t = lv_roller_get_selected(id(sensor_limits_tens_roller)->obj);
                  int val = h * 100 + t * 10 + o;
                  id(sensor_limit_value) = val;
                  lv_slider_set_value(sensor_limit_slider, val, LV_ANIM_OFF);
                  lv_label_set_text(sensor_limit_label, (std::to_string(val) + "°C").c_str());
                  id(last_sensor_lower_digits) = val % 100;
        - label:
            x: 340
            y: 183
            text_font: MONTSERRAT_20
            text_align: LEFT
            text: "°C"

        - label:
            id: sensor_limit_label
            x: 350
            y: 130
            text_font: MONTSERRAT_26
            text_align: RIGHT
            text: "0°C"
            text_color: 0 # not visible - for debugging slider + rollers + stored value

        - button:
            x: 12
            y: 160
            width: 70
            height: 100
            bg_color: 0x555555
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "CLR"
                  bg_color: 0x555555
            on_click:
              then:
                - lambda: |-
                    id(sensor_limit_value) = 0;
                    id(last_sensor_lower_digits) = 0;
                - lvgl.slider.update:
                    id: sensor_limit_slider
                    value: !lambda return id(sensor_limit_value);
                - lambda: |-
                    lv_roller_set_selected(id(sensor_limits_hundreds_roller)->obj, 0, LV_ANIM_ON);
                    lv_roller_set_selected(id(sensor_limits_tens_roller)->obj, 0, LV_ANIM_ON);
                    lv_roller_set_selected(id(sensor_limits_ones_roller)->obj, 0, LV_ANIM_ON);
        - button:
            x: 398
            y: 160
            width: 70
            height: 100
            bg_color: 0x555555
            widgets:
              - label:
                  align: CENTER
                  text_font: MONTSERRAT_26
                  text: "OK"
                  bg_color: 0x555555
            on_click:
              then:
              - lambda: |-
                  switch ( id(sensor_index) ){
                    case 1:
                      id(zone1_limit_value) = id(sensor_limit_value);
                      break;
                    case 2:
                      id(zone2_limit_value) = id(sensor_limit_value);
                      break;
                    case 3:
                      id(zone3_limit_value) = id(sensor_limit_value);
                      break;
                    case 4:
                      id(zone4_limit_value) = id(sensor_limit_value);
                      break;
                    case 5:
                      id(sensor1_limit_value) = id(sensor_limit_value);
                      if( id(sensor1_limit_value) == 0 )  id(active_sensors) &= ~0x01;
                      break;
                    case 6:
                      id(sensor2_limit_value) = id(sensor_limit_value);
                      if( id(sensor2_limit_value) == 0 )  id(active_sensors) &= ~0x02;
                      break;
                    case 7:
                      id(sensor3_limit_value) = id(sensor_limit_value);
                      if( id(sensor3_limit_value) == 0 )  id(active_sensors) &= ~0x04;
                      break;
                    case 8:
                      id(sensor4_limit_value) = id(sensor_limit_value);
                      if( id(sensor4_limit_value) == 0 )  id(active_sensors) &= ~0x08;
                      break;
                  }
              # refresh all widgets on arcs_page
              - lvgl.widget.refresh: [zone1_limit_arc, zone2_limit_arc, zone3_limit_arc, zone4_limit_arc]
              - lvgl.widget.refresh: [sensor1_obj, sensor2_obj, sensor3_obj, sensor4_obj]
              - lvgl.widget.refresh: [sensor1_limit_arc, sensor2_limit_arc, sensor3_limit_arc, sensor4_limit_arc]
              - lvgl.widget.refresh: [zone1_label, zone2_label, zone3_label, zone4_label]
              - lvgl.widget.refresh: [sensor1_label, sensor2_label, sensor3_label, sensor4_label]
              - lvgl.widget.refresh: sensors_headline
              # refresh all widgets on numbers_page
              - lvgl.widget.refresh: [zone1_limit_label2, zone2_limit_label2, zone3_limit_label2, zone4_limit_label2]
              - lvgl.widget.refresh: [sensor1_obj2, sensor2_obj2, sensor3_obj2, sensor4_obj2]
              - lvgl.widget.refresh: [sensor1_limit_label2, sensor2_limit_label2, sensor3_limit_label2, sensor4_limit_label2]
              - lvgl.widget.refresh: [zone1_label2, zone2_label2, zone3_label2, zone4_label2]
              - lvgl.widget.refresh: [sensor1_label2, sensor2_label2, sensor3_label2, sensor4_label2]
              - lvgl.widget.refresh: sensors_headline2
              - lvgl.widget.redraw:
              - script.execute: show_temperatures_page

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    - id: settings_page
      skip: true
      pad_all: 0
      on_load:
        then:
          - lvgl.widget.show: settings_status_bar_top
          - lvgl.widget.hide: status_bar_bottom
          - lambda: |-
              id(settings_g32_mac_address) = id(settings_g32_mac_address_persistent);

              std::string t_meater_mac_addresses = id(settings_meater_mac_addresses_persistent);
              int idx = 0;
              while (idx < 4) {
                id(settings_meater_mac_addresses)[idx] = t_meater_mac_addresses.substr(idx * 18, 17);
                idx++;
              }

              id(settings_wifi_ssid) = id(settings_wifi_ssid_persistent);
              id(settings_wifi_password) = id(settings_wifi_password_persistent);              

              id(settings_min_gas_value) = id(settings_min_gas_value_persistent);
              id(settings_min_soc_value) = id(settings_min_soc_value_persistent);

              id(settings_hide_soc) = id(settings_hide_soc_persistent);
              id(settings_show_time) = id(settings_show_time_persistent);
              id(settings_hide_timer) = id(settings_hide_timer_persistent);
              id(settings_enable_temperature_limits) = id(settings_enable_temperature_limits_persistent);
              id(settings_hide_inactive_sensors) = id(settings_hide_inactive_sensors_persistent);

              // Restore gas roller by value
              char gas_target[3];
              int gas_val = id(settings_min_gas_value);
              snprintf(gas_target, sizeof(gas_target), "%02d", gas_val);  // Format with leading zero if <10
              const char* opts = lv_roller_get_options(id(settings_min_gas_roller)->obj);
              const char* pos = opts;
              int index = 0;
              while (*pos) {
                char gas_opt_buf[3];
                int len = 0;
                while (*pos && *pos != '\n' && len < 2) {
                  gas_opt_buf[len++] = *pos++;
                }
                gas_opt_buf[len] = '\0';
                if (*pos == '\n') pos++;
                if (strcmp(gas_opt_buf, gas_target) == 0) {
                  lv_roller_set_selected(id(settings_min_gas_roller)->obj, index, LV_ANIM_OFF);
                  break;
                }
                index++;
              }   

              // Restore soc roller by value (no leading zero needed since all >=10, but using same pattern for consistency)
              char soc_target[3];
              int soc_val = id(settings_min_soc_value);
              snprintf(soc_target, sizeof(soc_target), "%02d", soc_val);  // Format with leading zero if <10
              opts = lv_roller_get_options(id(settings_min_soc_roller)->obj);
              pos = opts;
              index = 0;
              while (*pos) {
                char soc_opt_buf[3];
                int len = 0;
                while (*pos && *pos != '\n' && len < 2) {
                  soc_opt_buf[len++] = *pos++;
                }
                soc_opt_buf[len] = '\0';
                if (*pos == '\n') pos++;
                if (strcmp(soc_opt_buf, soc_target) == 0) {
                  lv_roller_set_selected(id(settings_min_soc_roller)->obj, index, LV_ANIM_OFF);
                  break;
                }
                index++;
              }   

              // Restore display timeout roller by value
              char timeout_target[4];
              int timeout_val = id(settings_display_timeout_value);
              snprintf(timeout_target, sizeof(timeout_target), "%03d", timeout_val);  // Format with leading zero if <10
              opts = lv_roller_get_options(id(settings_display_timeout_roller)->obj);
              pos = opts;
              index = 0;
              while (*pos) {
                char display_timeout_opt_buf[4];
                int len = 0;
                while (*pos && *pos != '\n' && len < 3) {
                  display_timeout_opt_buf[len++] = *pos++;
                }
                display_timeout_opt_buf[len] = '\0';
                if (*pos == '\n') pos++;
                if (strcmp(display_timeout_opt_buf, timeout_target) == 0) {
                  lv_roller_set_selected(id(settings_display_timeout_roller)->obj, index, LV_ANIM_OFF);
                  break;
                }
                index++;
              }
          - lvgl.widget.refresh: [settings_wifi_ssid_textarea, settings_wifi_password_textarea]
          - lvgl.widget.update:
              id: settings_hide_soc_switch
              state:
                checked: !lambda |-
                  return id(settings_hide_soc) == 0;
          - lvgl.widget.update:
              id: settings_show_time_switch
              state:
                checked: !lambda |-
                  return id(settings_show_time);
          - lvgl.widget.update:
              id: settings_hide_timer_switch
              state:
                checked: !lambda |-
                  return id(settings_hide_timer) == 0;
          - lvgl.widget.update:
              id: settings_enable_temperature_limits_switch
              state:
                checked: !lambda |-
                  return id(settings_enable_temperature_limits);
          - lvgl.widget.update:
              id: settings_hide_inactive_sensors_switch
              state:
                checked: !lambda |-
                  return id(settings_hide_inactive_sensors);
          - lvgl.widget.refresh: settings_mac_address_label
          - lvgl.widget.hide: settings_mac_address_updated
      widgets:
        - obj:
            id: settings_menu
            x: 0
            y: 23
            height: 297
            width: 480
            border_width: 0
            pad_all: 0
            bg_color: 0
            radius: 0
            hidden: false
            widgets:
              - tabview:
                  id: settings_tabview
                  position: left
                  x: 0
                  y: 0
                  width: 480
                  height: 297
                  text_color: 0xffffff
                  pad_all: 0
                  content_style:
                    scrollable: false
                    bg_color: 0
                  tab_style:
                    border_width: 0
                    bg_color: 0
                    width: 50
                    items:
                      text_color: 0x555555
                  on_value:
                    - lvgl.widget.hide: my_keyboard
                  tabs:
                    - name: "\uF293"  # BT
                      id: settings_tab_ble_mac
                      pad_all: 0
                      widgets:
                        - obj:  # mac_address
                            x: 0
                            y: 0
                            width: 380
                            height: 297
                            pad_all: 0
                            border_width: 0
                            bg_color: 0
                            radius: 0
                            widgets:
                              - label:
                                  x: 0
                                  y: 35
                                  width: 380
                                  text_font: MONTSERRAT_14
                                  text_align: CENTER
                                  text: "MAC Adresse\ndes G32 Connected"
                              - label:
                                  id: settings_mac_address_label
                                  x: 105
                                  y: 90
                                  width: 170
                                  text_font: MONTSERRAT_18
                                  text_align: CENTER
                                  text: !lambda |-
                                    return id(settings_g32_mac_address);
                              - label:
                                  id: settings_mac_address_updated
                                  x: 285
                                  y: 90
                                  width: 20
                                  text_font: MONTSERRAT_18
                                  text_align: LEFT
                                  text: "\uF00C"
                                  hidden: true
                              - button:
                                  id: settings_g32_mac_address_search_button
                                  x: 120
                                  y: 155
                                  width: 140
                                  height: 50
                                  bg_color: 0x555555
                                  widgets:
                                    - label:
                                        align: CENTER
                                        text_font: MONTSERRAT_20
                                        text: "Suchen"
                                        bg_color: 0x555555
                                  on_click:
                                    then:
                                      - script.execute: ble_g32_scan_start
                              - button:
                                  id: settings_g32_mac_address_abort_button
                                  x: 120
                                  y: 155
                                  width: 140
                                  height: 50
                                  bg_color: 0x555555
                                  hidden: true
                                  widgets:
                                    - label:
                                        align: CENTER
                                        text_font: MONTSERRAT_20
                                        text: "Stopp"
                                        bg_color: 0x555555
                                  on_click:
                                    then:
                                      - script.execute: ble_g32_scan_stop

                    - name: "\uF1EB"  #  wifi
                      id: settings_tab_wifi
                      pad_all: 0
                      widgets:
                        - obj: # wifi credentials
                            x: 0
                            y: 0
                            width: 380
                            height: 297
                            pad_all: 0
                            border_width: 0
                            bg_color: 0
                            radius: 0
                            widgets:
                              - label:
                                  x: 0
                                  y: 30
                                  width: 380
                                  text_font: MONTSERRAT_14
                                  text_align: CENTER
                                  text: "WIFI Zugangsdaten"
                              - textarea:
                                  id: settings_wifi_ssid_textarea
                                  x: 20
                                  y: 60
                                  width: 340
                                  height: 30
                                  text_font: MONTSERRAT_18
                                  placeholder_text: "SSID"
                                  one_line: true
                                  bg_color: 0xffffff
                                  text_color: 0
                                  border_width: 1
                                  border_color: 0
                                  text: !lambda |-
                                    return id(settings_wifi_ssid);
                                  on_click:
                                    - lambda: lv_keyboard_set_textarea(id(my_keyboard)->obj, settings_wifi_ssid_textarea);
                                    - lvgl.widget.show: my_keyboard
                              - textarea:
                                  id: settings_wifi_password_textarea
                                  x: 20
                                  y: 100
                                  width: 340
                                  height: 30
                                  text_font: MONTSERRAT_18
                                  placeholder_text: "Passwort"
                                  one_line: true
                                  password_mode: true
                                  bg_color: 0xffffff
                                  text_color: 0
                                  border_width: 1
                                  border_color: 0
                                  text: !lambda |-
                                    return id(settings_wifi_password);
                                  on_click:
                                    - lambda: lv_keyboard_set_textarea(id(my_keyboard)->obj, settings_wifi_password_textarea);
                                    - lvgl.widget.show: my_keyboard

                    - name: "\uF0C9"  #  settings
                      id: settings_tab_settings
                      pad_all: 0
                      widgets:
                        - obj: # switches
                            x: 0
                            y: 0
                            width: 380
                            height: 297
                            pad_all: 0
                            border_width: 0
                            bg_color: 0
                            radius: 0
                            widgets:
                              - label:
                                  x: 110
                                  y: 29
                                  width: 220
                                  text_font: MONTSERRAT_14
                                  text_align: LEFT
                                  text: "Batterie Level"
                              - switch:
                                  id: settings_hide_soc_switch
                                  x: 40
                                  y: 25
                                  width: 50
                                  height: 25
                                  bg_color: 0x555555
                                  indicator:
                                    checked:
                                      bg_color: 0x00ff00
                                  state:
                                    checked: !lambda |-
                                      return id(settings_hide_soc) == 0;
                                  on_value:
                                    - lambda: |-
                                        id(settings_hide_soc) = (x == 0);

                              - label:
                                  x: 110
                                  y: 74
                                  width: 220
                                  text_font: MONTSERRAT_14
                                  text_align: LEFT
                                  text: "Uhrzeit (erfordert WIFI)"
                              - switch:
                                  id: settings_show_time_switch
                                  x: 40
                                  y: 70
                                  width: 50
                                  height: 25
                                  bg_color: 0x555555
                                  indicator:
                                    checked:
                                      bg_color: 0x00ff00
                                  state:
                                    checked: !lambda |-
                                      return id(settings_show_time);
                                  on_value:
                                    - lambda: |-
                                        id(settings_show_time) = x;

                              - label:
                                  x: 110
                                  y: 119
                                  width: 220
                                  text_font: MONTSERRAT_14
                                  text_align: LEFT
                                  text: "Timer"
                              - switch:
                                  id: settings_hide_timer_switch
                                  x: 40
                                  y: 115
                                  width: 50
                                  height: 25
                                  bg_color: 0x555555
                                  indicator:
                                    checked:
                                      bg_color: 0x00ff00
                                  state:
                                    checked: !lambda |-
                                      return id(settings_hide_timer) == 0;
                                  on_value:
                                    - lambda: |-
                                        id(settings_hide_timer) = (x == 0);

                              - label:
                                  x: 110
                                  y: 164
                                  width: 220
                                  text_font: MONTSERRAT_14
                                  text_align: LEFT
                                  text: "Temp. Limits"
                              - switch:
                                  id: settings_enable_temperature_limits_switch
                                  x: 40
                                  y: 160
                                  width: 50
                                  height: 25
                                  bg_color: 0x555555
                                  indicator:
                                    checked:
                                      bg_color: 0x00ff00
                                  state:
                                    checked: !lambda |-
                                      return id(settings_enable_temperature_limits);
                                  on_value:
                                    - lambda: |-
                                        id(settings_enable_temperature_limits) = x;

                              - label:
                                  x: 110
                                  y: 209
                                  width: 220
                                  text_font: MONTSERRAT_14
                                  text_align: LEFT
                                  text: "nur aktive Sensoren"
                              - switch:
                                  id: settings_hide_inactive_sensors_switch
                                  x: 40
                                  y: 205
                                  width: 50
                                  height: 25
                                  bg_color: 0x555555
                                  indicator:
                                    checked:
                                      bg_color: 0x00ff00
                                  state:
                                    checked: !lambda |-
                                      return id(settings_hide_inactive_sensors);
                                  on_value:
                                    - lambda: |-
                                        id(settings_hide_inactive_sensors) = x;

                    - name: "\uF071"  # warnings
                      id: settings_tab_warnings
                      pad_all: 0
                      widgets:
                        - obj:  # min_gas
                            x: 0
                            y: 0
                            width: 190
                            height: 297
                            border_width: 0
                            bg_color: 0
                            pad_all: 0
                            radius: 0
                            widgets:
                              - label:
                                  x: 0
                                  y: 35
                                  width: 190
                                  text_font: MONTSERRAT_14
                                  text_align: CENTER
                                  text: "Warnung\nGas Level"
                              - label:
                                  x: 127
                                  y: 144
                                  width: 20
                                  text_font: MONTSERRAT_20
                                  text_align: CENTER
                                  text: "%"
                              - roller:
                                  id: settings_min_gas_roller
                                  x: 65
                                  y: 90
                                  width: 60
                                  text_font: MONTSERRAT_20
                                  options: ['60','55','50','45','40','35','30','25','20','15','10','05']
                                  selected:
                                    bg_color: 0x555555
                                  on_value:
                                    - lambda: |-
                                        int val = atoi(text.c_str());
                                        id(settings_min_gas_value) = val;


                        - obj: # min_soc
                            x: 190
                            y: 0
                            width: 190
                            height: 297
                            pad_all: 0
                            border_width: 0
                            bg_color: 0
                            radius: 0
                            widgets:
                              - label:
                                  x: 0
                                  y: 35
                                  width: 190
                                  text_font: MONTSERRAT_14
                                  text_align: CENTER
                                  text: "Warnung\nBatterie Level"
                              - label:
                                  x: 127
                                  y: 144
                                  width: 20
                                  text_font: MONTSERRAT_20
                                  text_align: CENTER
                                  text: "%"
                              - roller:
                                  id: settings_min_soc_roller
                                  x: 65
                                  y: 90
                                  width: 60
                                  text_font: MONTSERRAT_20
                                  options: ['50','40','30','20','10']
                                  selected:
                                    bg_color: 0x555555
                                  on_value:
                                    - lambda: |-
                                        int val = atoi(text.c_str());
                                        id(settings_min_soc_value) = val;


                    - name: "\uF06E"  # display
                      id: settings_tab_display
                      pad_all: 0
                      widgets:
                        - obj: # display_timeout
                            x: 0
                            y: 0
                            width: 380
                            height: 297
                            pad_all: 0
                            border_width: 0
                            bg_color: 0
                            radius: 0
                            widgets:
                              - label:
                                  x: 0
                                  y: 35
                                  width: 380
                                  text_font: MONTSERRAT_14
                                  text_align: CENTER
                                  text: "Display\nDeaktivierung"
                              - label:
                                  x: 222
                                  y: 144
                                  width: 20
                                  text_font: MONTSERRAT_20
                                  text_align: CENTER
                                  text: "s"
                              - roller:
                                  id: settings_display_timeout_roller
                                  x: 160
                                  y: 90
                                  width: 60
                                  text_font: MONTSERRAT_20
                                  options: ['0','600','300','240','180','60']
                                  selected:
                                    bg_color: 0x555555
                                  on_value:
                                    - lambda: |-
                                        int val = atoi(text.c_str());
                                        id(settings_display_timeout_value) = val;
                                        // ESP_LOGI("debug", "display_imeout=%d", id(settings_display_timeout_value));
                    - name: "MT"  # Meater
                      id: settings_tab_ble_meater
                      pad_all: 0
                      widgets:
                        - obj:  # meater mac_addresses
                            x: 0
                            y: 0
                            width: 380
                            height: 297
                            pad_all: 0
                            border_width: 0
                            bg_color: 0
                            radius: 0
                            widgets:
                              - label:
                                  x: 0
                                  y: 35
                                  width: 380
                                  text_font: MONTSERRAT_14
                                  text_align: CENTER
                                  text: "MAC Adressen der MEATER(R)"
                              - label:
                                  id: settings_meater1_label
                                  x: 0
                                  y: 75
                                  width: 200
                                  text_font: MONTSERRAT_18
                                  text_align: RIGHT
                                  text: !lambda |-
                                    return id(settings_meater_mac_addresses)[0];
                              - button:
                                  id: settings_meater1_mac_address_search_button
                                  x: 230
                                  y: 70
                                  width: 120
                                  height: 30
                                  bg_color: 0x555555
                                  widgets:
                                    - label:
                                        align: CENTER
                                        text_font: MONTSERRAT_20
                                        text: "Suchen"
                                        bg_color: 0x555555
                                  # on_click:
                                  #   then:
                                  #     - script.execute: ble_meater_scan_start
                              - button:
                                  id: settings_meater1_mac_address_abort_button
                                  x: 230
                                  y: 70
                                  width: 120
                                  height: 30
                                  bg_color: 0x555555
                                  hidden: true
                                  widgets:
                                    - label:
                                        align: CENTER
                                        text_font: MONTSERRAT_20
                                        text: "Stopp"
                                        bg_color: 0x555555
                                  # on_click:
                                  #   then:
                                  #     - script.execute: ble_meater_scan_stop
                              - label:
                                  id: settings_meater2_label
                                  x: 0
                                  y: 125
                                  width: 200
                                  text_font: MONTSERRAT_18
                                  text_align: RIGHT
                                  text: !lambda |-
                                    return id(settings_meater_mac_addresses)[1];
                              - button:
                                  id: settings_meater2_mac_address_search_button
                                  x: 230
                                  y: 120
                                  width: 120
                                  height: 30
                                  bg_color: 0x555555
                                  widgets:
                                    - label:
                                        align: CENTER
                                        text_font: MONTSERRAT_20
                                        text: "Suchen"
                                        bg_color: 0x555555
                                  # on_click:
                                  #   then:
                                  #     - script.execute: ble_meater_scan_start
                              - button:
                                  id: settings_meater2_mac_address_abort_button
                                  x: 230
                                  y: 120
                                  width: 120
                                  height: 30
                                  bg_color: 0x555555
                                  hidden: true
                                  widgets:
                                    - label:
                                        align: CENTER
                                        text_font: MONTSERRAT_20
                                        text: "Stopp"
                                        bg_color: 0x555555
                                  # on_click:
                                  #   then:
                                  #     - script.execute: ble_meater_scan_stop
                              - label:
                                  id: settings_meater3_label
                                  x: 0
                                  y: 175
                                  width: 200
                                  text_font: MONTSERRAT_18
                                  text_align: RIGHT
                                  text: !lambda |-
                                    return id(settings_meater_mac_addresses)[2];
                              - button:
                                  id: settings_meater3_mac_address_search_button
                                  x: 230
                                  y: 170
                                  width: 120
                                  height: 30
                                  bg_color: 0x555555
                                  widgets:
                                    - label:
                                        align: CENTER
                                        text_font: MONTSERRAT_20
                                        text: "Suchen"
                                        bg_color: 0x555555
                                  # on_click:
                                  #   then:
                                  #     - script.execute: ble_meater_scan_start
                              - button:
                                  id: settings_meater3_mac_address_abort_button
                                  x: 230
                                  y: 170
                                  width: 120
                                  height: 30
                                  bg_color: 0x555555
                                  hidden: true
                                  widgets:
                                    - label:
                                        align: CENTER
                                        text_font: MONTSERRAT_20
                                        text: "Stopp"
                                        bg_color: 0x555555
                                  # on_click:
                                  #   then:
                                  #     - script.execute: ble_meater_scan_stop
                              - label:
                                  id: settings_meater4_label
                                  x: 0
                                  y: 225
                                  width: 200
                                  text_font: MONTSERRAT_18
                                  text_align: RIGHT
                                  text: !lambda |-
                                    return id(settings_meater_mac_addresses)[3];
                              - button:
                                  id: settings_meater4_mac_address_search_button
                                  x: 230
                                  y: 220
                                  width: 120
                                  height: 30
                                  bg_color: 0x555555
                                  widgets:
                                    - label:
                                        align: CENTER
                                        text_font: MONTSERRAT_20
                                        text: "Suchen"
                                        bg_color: 0x555555
                                  # on_click:
                                  #   then:
                                  #     - script.execute: ble_meater_scan_start
                              - button:
                                  id: settings_meater4_mac_address_abort_button
                                  x: 230
                                  y: 220
                                  width: 120
                                  height: 30
                                  bg_color: 0x555555
                                  hidden: true
                                  widgets:
                                    - label:
                                        align: CENTER
                                        text_font: MONTSERRAT_20
                                        text: "Stopp"
                                        bg_color: 0x555555
                                  # on_click:
                                  #   then:
                                  #     - script.execute: ble_meater_scan_stop

              - obj:  # okay / abort 
                  x: 430
                  y: 0
                  width: 50
                  height: 297
                  pad_all: 0
                  border_width: 0
                  bg_color: 0
                  radius: 0
                  widgets:
                    - button:  # okay
                        x: 0
                        y: 50
                        width: 50
                        height: 90
                        bg_color: 0x555555
                        widgets:
                          - label:
                              align: CENTER
                              text_font: MONTSERRAT_20
                              text: "\uF0C7"
                              bg_color: 0x555555
                        on_click:
                          - lvgl.widget.hide: my_keyboard
                          - lambda: |-
                              id(settings_g32_mac_address_persistent) = id(settings_g32_mac_address);

                              std::string t_meater_mac_addresses = id(settings_meater_mac_addresses_persistent);
                              int idx = 0;
                              while (idx < 4) {
                                t_meater_mac_addresses.replace(idx * 18, 17, id(settings_meater_mac_addresses)[idx]);
                                idx++;
                              }
                              id(settings_meater_mac_addresses_persistent) = t_meater_mac_addresses;

                              id(settings_wifi_ssid) = std::string(lv_textarea_get_text(settings_wifi_ssid_textarea));
                              id(settings_wifi_password) = std::string(lv_textarea_get_text(settings_wifi_password_textarea));
                              id(settings_wifi_ssid_persistent) = id(settings_wifi_ssid);
                              id(settings_wifi_password_persistent) = id(settings_wifi_password);

                              id(settings_min_gas_value_persistent) = id(settings_min_gas_value);
                              id(settings_min_soc_value_persistent) = id(settings_min_soc_value);
                              id(settings_display_timeout_value_persistent) = id(settings_display_timeout_value);

                              id(settings_hide_soc_persistent) = id(settings_hide_soc);
                              id(settings_show_time_persistent) = id(settings_show_time);
                              id(settings_hide_timer_persistent) = id(settings_hide_timer);
                              id(settings_enable_temperature_limits_persistent) = id(settings_enable_temperature_limits);
                              id(settings_hide_inactive_sensors_persistent) = id(settings_hide_inactive_sensors);

                              ESP_LOGI("settings", "g32_mac_address: %s", id(settings_g32_mac_address_persistent).c_str());
                              ESP_LOGI("settings", "min_gas_value: %d", id(settings_min_gas_value_persistent));
                              ESP_LOGI("settings", "min_soc_value: %d", id(settings_min_soc_value_persistent));
                              ESP_LOGI("settings", "display_timeout_value: %d", id(settings_display_timeout_value_persistent));
                              ESP_LOGI("settings", "hide_soc: %s", id(settings_hide_soc_persistent) ? "true" : "false");

                              ESP_LOGI("settings", "show_time: %s", id(settings_show_time_persistent) ? "true" : "false");
                              ESP_LOGI("settings", "hide_timer: %s", id(settings_hide_timer_persistent) ? "true" : "false");
                              ESP_LOGI("settings", "enable_temperature_limits: %s", id(settings_enable_temperature_limits_persistent) ? "true" : "false");
                              ESP_LOGI("settings", "hide_inactive_sensors: %s", id(settings_hide_inactive_sensors_persistent) ? "true" : "false");

                              if (!id(settings_enable_temperature_limits_persistent)) {
                                id(zone1_limit_value) = 0;
                                id(zone2_limit_value) = 0;
                                id(zone3_limit_value) = 0;
                                id(zone4_limit_value) = 0;
                                id(sensor1_limit_value) = 0;
                                id(sensor2_limit_value) = 0;
                                id(sensor3_limit_value) = 0;
                                id(sensor4_limit_value) = 0;
                              }
                          - lvgl.widget.refresh: [battery_symbol_obj, display_time]
                          - script.execute: apply_wifi
                          - script.execute: apply_mac_address

                          # for settings_enable_temperature_limits_persistent and settings_hide_inactive_sensors_persistent
                          - lvgl.widget.refresh: [zone1_label, zone2_label, zone3_label, zone4_label]
                          - lvgl.widget.refresh: [zone1_limit_arc, zone2_limit_arc, zone3_limit_arc, zone4_limit_arc]
                          - lvgl.widget.refresh: [sensor1_label, sensor2_label, sensor3_label, sensor4_label]
                          - lvgl.widget.refresh: [sensor1_limit_arc, sensor2_limit_arc, sensor3_limit_arc, sensor4_limit_arc]
                          - lvgl.widget.refresh: [zone1_label2, zone2_label2, zone3_label2, zone4_label2]
                          - lvgl.widget.refresh: [zone1_limit_label2, zone2_limit_label2, zone3_limit_label2, zone4_limit_label2]
                          - lvgl.widget.refresh: [sensor1_label2, sensor2_label2, sensor3_label2, sensor4_label2]
                          - lvgl.widget.refresh: [sensor1_limit_label2, sensor2_limit_label2, sensor3_limit_label2, sensor4_limit_label2]
                          - lvgl.widget.refresh: [sensor1_obj, sensor2_obj, sensor3_obj, sensor4_obj]
                          - lvgl.widget.refresh: [sensor1_obj2, sensor2_obj2, sensor3_obj2, sensor4_obj2]

                          - lvgl.widget.show: settings_persist_hint

                    - button:  # abort
                        x: 0
                        y: 155
                        width: 50
                        height: 90
                        bg_color: 0x555555
                        widgets:
                          - label:
                              align: CENTER
                              text_font: MONTSERRAT_20
                              text: "\uF00D"
                              bg_color: 0x555555
                        on_click:
                          - lvgl.widget.hide: my_keyboard
                          - script.execute: apply_mac_address
                          - script.execute: show_temperatures_page

              - obj:
                  id: settings_persist_hint
                  x: 0
                  y: 0
                  width: 480
                  height: 297
                  text_color: 0xffffff
                  radius: 0
                  border_width: 0
                  border_color: 0
                  pad_all: 0
                  bg_color: 0
                  hidden: true
                  widgets:
                    - label:
                        x: 0
                        y: 35
                        width: 480
                        text_font: MONTSERRAT_14
                        text_align: CENTER
                        text: "Achtung:\nDas dauerhafte Speichern der\nEinstellungen kann bis zu\n60 Sekunden dauern!"
                    - button:
                        id: settings_persist_hint_button
                        x: 120
                        y: 155
                        width: 240
                        height: 50
                        bg_color: 0x555555
                        widgets:
                          - label:
                              align: CENTER
                              text_font: MONTSERRAT_20
                              text: "Verstanden"
                              bg_color: 0x555555
                        on_click:
                          then:
                            - script.execute: show_temperatures_page

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
sensor:
  - platform: adc
    pin: 5
    name: "Battery SOC"
    unit_of_measurement: "%"
    state_class: measurement
    device_class: battery
    accuracy_decimals: 2       # ???
    attenuation: 12db          # input voltage range: 150mV --- 2450mV
    samples: 16                # samples taken per update interval
    filters:
      - multiply: 1.72         # due to external voltage divider on adc input
      - sliding_window_moving_average:
          window_size: 15      # average over 15 values
      - calibrate_linear:      # linearise voltage->SOC dependency
          method: exact
          datapoints:
            - 3.00 ->   0.0    # <=3.00V = battery empty (0.0%)
            - 3.36 ->   5.0
            - 3.41 ->  10.0
            - 3.48 ->  20.0
            - 3.52 ->  30.0
            - 3.56 ->  40.0
            - 3.61 ->  50.0
            - 3.70 ->  60.0
            - 3.79 ->  70.0
            - 3.89 ->  80.0
            - 4.00 ->  90.0
            - 4.05 -> 100.0    # >=4.05V = battery full (100.0%)
      - clamp:
          min_value: 0.0
          max_value: 100.0
    update_interval: 4s        # new value after 4s*15(=window size) = 60s!
    on_value:
      - lambda: id(battery_soc_value) = x;
      - lvgl.widget.refresh: [battery_soc_label, battery_symbol, battery_bar]
      - lvgl.bar.update:
          id: battery_bar
          indicator:
            bg_color:  !lambda |-
              if( id(battery_soc_value) <= id(settings_min_soc_value_persistent) ) {
                return lv_color_hex(0xff0000); // red
                } else {
                return lv_color_hex(0x00ff00); // green
              }

  - platform: ble_rssi
    mac_address: ${g32_mac_address}
    name: "BT Signalstärke"
  - platform: wifi_signal
    name: "WiFi Signal ESP G32"
    update_interval: 10s
  - platform: internal_temperature
    name: "CPU Temperatur ESP G32"
    update_interval: 10s

  - platform: ble_client
    ble_client_id: ow_g32
    type: characteristic
    name: "G32 Datablock Read"
    service_uuid: 'dc0f41ea-b6ae-46a8-a19e-1a3bf4342bcb'
    characteristic_uuid: 'dc0f41e2-b6ae-46a8-a19e-1a3bf4342bcb'
    update_interval: 10s
    lambda: |-
      if (x.size() < 32) {
        ESP_LOGW("ble", "Received invalid BLE data (size: %d), skipping.", x.size());
        return {};
      }
      float t = (x[6]*10.0+x[7]/10.0);
      id(g32_zone1).publish_state(t);
      t = (x[8]*10.0+x[9]/10.0);
      id(g32_zone2).publish_state(t);
      t = (x[10]*10.0+x[11]/10.0);
      id(g32_zone3).publish_state(t);
      t = (x[12]*10.0+x[13]/10.0);
      id(g32_zone4).publish_state(t);
      t = (x[14]*10.0+x[15]/10.0);
      id(g32_probe1).publish_state(t);
      t = (x[16]*10.0+x[17]/10.0);
      id(g32_probe2).publish_state(t);
      t = (x[18]*10.0+x[19]/10.0);
      id(g32_probe3).publish_state(t);
      t = (x[20]*10.0+x[21]/10.0);
      id(g32_probe4).publish_state(t);
      t = (x[22]*256+x[23]);
      id(g32_gas_weight).publish_state(t);
      t = (x[24]);
      id(g32_firebox_open).publish_state(t);
      t = (x[25]);
      id(g32_light_on).publish_state(t);
      t = (x[31]);
      id(g32_gas_percent).publish_state(t);
      return (x[30]);

  - platform: template
    name: "G32 Zone 1"
    id: g32_zone1
    device_class: "temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    on_value:
      - lambda: id(zone1_value) = x;
      - lvgl.widget.refresh: [zone1_label, zone1_arc, zone1_label2]

  - platform: template
    name: "G32 Zone 2"
    id: g32_zone2
    device_class: "temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    on_value:
      - lambda: id(zone2_value) = x;
      - lvgl.widget.refresh: [zone2_label, zone2_arc, zone2_label2]

  - platform: template
    name: "G32 Zone 3"
    id: g32_zone3
    device_class: "temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    on_value:
      - lambda: id(zone3_value) = x;
      - lvgl.widget.refresh: [zone3_label, zone3_arc, zone3_label2]

  - platform: template
    name: "G32 Zone 4"
    id: g32_zone4
    device_class: "temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    on_value:
      - lambda: id(zone4_value) = x;
      - lvgl.widget.refresh: [zone4_label, zone4_arc, zone4_label2]

  - platform: template
    name: "G32 Sensor 1"
    id: g32_probe1
    device_class: "temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    on_value:
      - lambda: id(sensor1_value) = x;
      - lvgl.widget.refresh: [sensor1_label, sensor1_arc, sensor1_obj, sensors_headline]
      - lvgl.widget.refresh: [sensor1_label2, sensor1_obj2, sensors_headline2, sensors_obj2]

  - platform: template
    name: "G32 Sensor 2"
    id: g32_probe2
    device_class: "temperature"
    unit_of_measurement: "°C"
    on_value:
      - lambda: id(sensor2_value) = x;
      - lvgl.widget.refresh: [sensor2_label, sensor2_arc, sensor2_obj, sensors_headline]
      - lvgl.widget.refresh: [sensor2_label2, sensor2_obj2, sensors_headline2, sensors_obj2]

  - platform: template
    name: "G32 Sensor 3"
    id: g32_probe3
    device_class: "temperature"
    unit_of_measurement: "°C"
    on_value:
      - lambda: id(sensor3_value) = x;
      - lvgl.widget.refresh: [sensor3_label, sensor3_arc, sensor3_obj, sensors_headline]
      - lvgl.widget.refresh: [sensor3_label2, sensor3_obj2, sensors_headline2, sensors_obj2]

  - platform: template
    name: "G32 Sensor 4"
    id: g32_probe4
    device_class: "temperature"
    unit_of_measurement: "°C"
    on_value:
      - lambda: id(sensor4_value) = x;
      - lvgl.widget.refresh: [sensor4_label, sensor4_arc, sensor4_obj, sensors_headline]
      - lvgl.widget.refresh: [sensor4_label2, sensor4_obj2, sensors_headline2, sensors_obj2]

  - platform: template
    name: "G32 Gasbuddy Füllstand in g"
    id: g32_gas_weight
    device_class: weight
    state_class: measurement
    unit_of_measurement: g
    icon: "mdi:weight-gram"
    on_value:
      - lvgl.label.update:
          id: gas_weight_label
          text: !lambda |-
            if(x >= 11000) {return ("11000 g");
            } else {
              return (to_string(static_cast<int>(x)) + " g").c_str();
            }

  - platform: template
    name: "G32 Gasbuddy Füllstand in %"
    id: g32_gas_percent
    state_class: measurement
    unit_of_measurement: "%"
    icon: "mdi:gas-cylinder"
    on_value:
      - lvgl.label.update:
          id: gas_percent_label
          text: !lambda |-
            if(x > 100) {return ("---");
            } else {
              return (to_string(static_cast<int>(x)) + " %").c_str();
            }
      - lvgl.bar.update:
          id: gas_percent_bar
          value: !lambda |-
            if(x > 100) {return (100);
            } else {
              return (x);
            }
      - lvgl.bar.update:
          id: gas_percent_bar
          indicator:
            bg_color: !lambda |-
              if( x <= id(settings_min_gas_value_persistent) ) {
                return lv_color_hex(${Gas_Bar_Low_Color});
              } else {
                return lv_color_hex(${Gas_Bar_Color});
              }
    

binary_sensor:
  - platform: gpio
    name: "Display Tilt Sensor"
    pin:
      number: GPIO18
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 200ms
      - delayed_off: 200ms
    on_press:
      - lambda: |-
          ESP_LOGD("custom","Display 90°");
    on_release:
      - lambda: |-
          ESP_LOGD("custom","Display 270°");

  - platform: status
    name: "Status ESP G32"

  - platform: template
    name: "G32 Licht"
    id: g32_light_on
    icon: "mdi:light-flood-down"
    on_state:
      - lvgl.label.update:
          id: light_on_label
          hidden: !lambda return(!x);

  - platform: template
    name: "G32 Haube"
    id: g32_firebox_open
    device_class: "door"
    icon: "mdi:door"
    on_state:
      - lvgl.label.update:
          id: firebox_open_label
          hidden: !lambda return(!x);

script:
  - id: time_update
    then:
      - if:
          condition:
            lambda: 'return id(settings_show_time_persistent);'
          then:
            - lvgl.label.update:
                id: display_time
                text: !lambda |-
                  static char time_buf[16];
                  auto now = id(ha_time).now();
                  snprintf(time_buf, sizeof(time_buf), "%02d:%02d:%02d", now.hour, now.minute, now.second);
                  return time_buf;
            - lvgl.label.update:
                id: display_time
                hidden: !lambda |-
                  return (!id(settings_show_time_persistent) && id(settings_hide_timer_persistent));
      - if:
          condition:
            lambda: 'return (!id(settings_show_time_persistent) && !id(settings_hide_timer_persistent));'
          then:
            - lvgl.label.update:
                id: display_time
                text: "00:00:00"

  - id: timer_update
    then:
      - lvgl.label.update:
          id: timer_value
          text: !lambda |-
            if( id(timer_active) == true ) {
              if( id(timer_s) > 0 )
              {
                id(timer_s) -= 1;
              }
              else
              {
                if( id(timer_m) > 0 )
                {
                  id(timer_s) = 59;
                  id(timer_m) = id(timer_m) - 1;
                }
                else
                {
                  if( id(timer_h) > 0 )
                  {
                    id(timer_s) = 59;
                    id(timer_m) = 59;
                    id(timer_h) = id(timer_h) - 1;
                  }
                  else
                  {
                    if( id(timer_alarm) == false ) {
                      id(timer_alarm) = true;
                      id(my_rtttl).play("${Timer_Alarm_Sound}");
                    }
                  }
                }
              }
              if( id(timer_alarm) == false ) {
                static char time_buf[16];
                snprintf(time_buf, sizeof(time_buf), "%02d:%02d:%02d", id(timer_h), id(timer_m), id(timer_s));
                return time_buf;
              } else {
                return ("00:00:00");
              }
            } else {
              return ("");
            }
      - lvgl.label.update:
          id: timer_value
          text_color: !lambda |-
            if( id(timer_alarm) == true ) {
              return lv_color_hex(0xff0000);
            } else {
              return lv_color_hex(0xffffff);
            }

  - id: apply_mac_address
    then:
        # this ensures the ble_client changes MAC at runtime
        - lambda: !lambda |-
            uint64_t addr = 0;
            uint64_t b1, b2, b3, b4, b5, b6;
            if (sscanf(id(settings_g32_mac_address_persistent).c_str(), "%llx:%llx:%llx:%llx:%llx:%llx", &b1, &b2, &b3, &b4, &b5, &b6) == 6) {
              addr = (b1 << 40) | (b2 << 32) | (b3 << 24) | (b4 << 16) | (b5 << 8) | b6;
            }
            id(ow_g32).set_address(addr);
            ESP_LOGI("settings", "set G32 MAC address to %s", id(settings_g32_mac_address_persistent).c_str());

  - id: apply_wifi
    then:
      - globals.set:
          id: apply_wifi_started_by_user
          value: 'true'
      - wifi.disable:
      - delay: 1s
      - wifi.configure:
          ssid: !lambda |-
            return id(settings_wifi_ssid_persistent);
          password: !lambda |-
            return id(settings_wifi_password_persistent);
      - wifi.enable:

  - id: hide_boot_screen
    then:
      - if:
          condition:
            lambda: 'return !id(boot_screen_hidden);'
          then:
            - script.execute: apply_mac_address
            - script.execute: apply_wifi
            - lvgl.widget.hide: boot_screen
            - lvgl.widget.show: [status_bar_top, status_bar_bottom]

            # some things to refresh from persisted settings
            - lvgl.widget.refresh: [battery_symbol_obj, display_time]

            # for settings_enable_temperature_limits_persistent and settings_hide_inactive_sensors_persistent
            - lvgl.widget.refresh: [zone1_label, zone2_label, zone3_label, zone4_label]
            - lvgl.widget.refresh: [zone1_limit_arc, zone2_limit_arc, zone3_limit_arc, zone4_limit_arc]
            - lvgl.widget.refresh: [sensor1_label, sensor2_label, sensor3_label, sensor4_label]
            - lvgl.widget.refresh: [sensor1_limit_arc, sensor2_limit_arc, sensor3_limit_arc, sensor4_limit_arc]
            - lvgl.widget.refresh: [zone1_label2, zone2_label2, zone3_label2, zone4_label2]
            - lvgl.widget.refresh: [zone1_limit_label2, zone2_limit_label2, zone3_limit_label2, zone4_limit_label2]
            - lvgl.widget.refresh: [sensor1_label2, sensor2_label2, sensor3_label2, sensor4_label2]
            - lvgl.widget.refresh: [sensor1_limit_label2, sensor2_limit_label2, sensor3_limit_label2, sensor4_limit_label2]
            - lvgl.widget.refresh: [sensor1_obj, sensor2_obj, sensor3_obj, sensor4_obj]
            - lvgl.widget.refresh: [sensor1_obj2, sensor2_obj2, sensor3_obj2, sensor4_obj2]
            - globals.set:
                id: boot_screen_hidden
                value: 'true'

  - id: show_temperatures_page
    then:
      - lvgl.widget.hide: [settings_status_bar_top, my_keyboard]
      - lvgl.widget.show: status_bar_bottom
      - if:
          condition:
            lambda: 'return id(page_index) == 1;'
          then:
            - lvgl.page.show: arcs_page
          else:
            - lvgl.page.show: numbers_page              
      - script.execute: ble_g32_scan_stop
      - lvgl.widget.hide: settings_persist_hint

  - id: ble_g32_scan_start
    then:
      - globals.set:
          id: ble_g32_scan_started_by_user
          value: 'true'
      - lvgl.widget.show: settings_g32_mac_address_abort_button
      - lvgl.widget.hide: [settings_g32_mac_address_search_button, settings_mac_address_updated]

  - id: ble_g32_scan_stop
    then:
      - globals.set:
          id: ble_g32_scan_started_by_user
          value: 'false'
      - lvgl.widget.hide: settings_g32_mac_address_abort_button
      - lvgl.widget.show: settings_g32_mac_address_search_button
      - lvgl.widget.refresh: settings_mac_address_label
